<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Airy</title>
  
  
  <link href="https://airy6.github.io/atom.xml" rel="self"/>
  
  <link href="https://airy6.github.io/"/>
  <updated>2021-01-01T12:39:02.664Z</updated>
  <id>https://airy6.github.io/</id>
  
  <author>
    <name>Airy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP 与 JavaScript 端之间的加密解密</title>
    <link href="https://airy6.github.io/2020/07/07/PHP-%E4%B8%8E-JavaScript-%E7%AB%AF%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    <id>https://airy6.github.io/2020/07/07/PHP-%E4%B8%8E-JavaScript-%E7%AB%AF%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/</id>
    <published>2020-07-07T04:36:10.000Z</published>
    <updated>2021-01-01T12:39:02.664Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.learnku.com/uploads/images/202007/03/1/HdUs6edXk0.png!large" alt="Laravel"></p><p>只是为了好玩，让我们在客户端JavaScript中加密一些内容，然后让PHP服务器对其进行解密。请注意<strong>这个 <a href="https://stackoverflow.com/a/12327375/2224584">不会取代TLS (HTTPS)</a></strong>.</p><h3 id="使用-Nadium-Plus-的-JavaScript-加密"><a href="#使用-Nadium-Plus-的-JavaScript-加密" class="headerlink" title="使用 Nadium Plus 的 JavaScript 加密"></a>使用 Nadium Plus 的 JavaScript 加密</h3><p>你需要 <a href="https://github.com/paragonie/sodium-plus/releases">最新版的 sodium-plus</a> （在撰写本文时，它是 <a href="https://github.com/paragonie/sodium-plus/releases/tag/v0.4.0">version 0.4.0</a>.)</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script</span><br><span class="line">  src=<span class="string">&quot;/static/js/sodium-plus.min.js&quot;</span></span><br><span class="line">  integrity=<span class="string">&quot;sha384-lv7SVE0eb0bXA3fgK6PwlhViiUwG6tBuMAhS8XX7RvBvyRcdEdJ8HKtFgs4vHTUh&quot;</span></span><br><span class="line">&gt;&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来，您将要编写一些JavaScript代码来加密消息并将其发送到服务器。我将在此示例中使用jQuery，但是您可以轻松地使其适应使用<code>XMLHttpRequest</code>对象。</p><p>让我们定义两个函数。人们从硬编码的字符串中加载了一个<code>CryptographyKey</code>对象(n.b.您从不想真正这样做，但是为了简单易用的示例，我们使用了硬编码的秘密)。另一个实际上加密了一条消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取示例密钥。在现实世界中，你需要随机生成这些。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getExampleKey</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.sodium) <span class="built_in">window</span>.sodium = <span class="keyword">await</span> SodiumPlus.auto();</span><br><span class="line">    <span class="keyword">return</span> CryptographyKey.from(</span><br><span class="line">        <span class="string">&#x27;e9897cea109576c2f8088c277125d553e4f83afbc0abbb92cfb1f7b776b4fee0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;hex&#x27;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// return await sodium.crypto_secretbox_keygen();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密传入的 message.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">encryptMessage</span>(<span class="params">message, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.sodium) <span class="built_in">window</span>.sodium = <span class="keyword">await</span> SodiumPlus.auto();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> nonce = <span class="keyword">await</span> sodium.randombytes_buf(<span class="number">24</span>);</span><br><span class="line">    <span class="keyword">let</span> encrypted = <span class="keyword">await</span> sodium.crypto_secretbox(message, nonce, key);</span><br><span class="line">    <span class="keyword">return</span> nonce.toString(<span class="string">&#x27;hex&#x27;</span>) + encrypted.toString(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来，您将要编写一个函数来收集用户输入，对其进行加密，然后将其发送到服务器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sendEncryptedMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> key = <span class="keyword">await</span> getExampleKey();</span><br><span class="line">    <span class="keyword">let</span> message = $(<span class="string">&quot;#user-input&quot;</span>).val();</span><br><span class="line">    <span class="keyword">let</span> encrypted = <span class="keyword">await</span> encryptMessage(message, key);</span><br><span class="line">    $.post(<span class="string">&quot;/send-message&quot;</span>, &#123;<span class="string">&quot;message&quot;</span>: encrypted&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">        $(<span class="string">&quot;#output&quot;</span>).append(<span class="string">&quot;&lt;li&gt;&lt;pre&gt;&quot;</span> + response.message + <span class="string">&quot;&lt;/pre&gt;&lt;/li&gt;&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>…以及一些支持HTML的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;user-input&quot;</span>&gt;</span>Type a message to encrypt and send:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;user-input&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;send-it&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Send Encrypted Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">&quot;output&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="string">&quot;#send-it&quot;</span>).on(<span class="string">&#x27;click&#x27;</span>, sendEncryptedMessage);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用-Sodium-解密-PHP"><a href="#使用-Sodium-解密-PHP" class="headerlink" title="使用 Sodium 解密 PHP"></a>使用 Sodium 解密 PHP</h3><p>你需要 <a href="https://github.com/paragonie/sodium_compat">paragonie/sodium_compat</a>.</p><p>如果您使用的是 PHP 7.2 ，则很有可能只使用内置的 <code>sodium_*</code> 函数。但是，默认情况下某些发行版 <em>可能</em> 错误地禁用了钠扩展名。因此，为了安全起见，无论如何都要安装sodium_compat。</p><p>如果您使用的是框架(Symfony，Laravel)，您的代码看起来会干净很多，但是为了说明起见，解密代码如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">declare</span>(strict_types=<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;vendor/autoload.php&#x27;</span>; <span class="comment">// Composer</span></span><br><span class="line"></span><br><span class="line">header(<span class="string">&#x27;Content-Type: application/json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$key</span> = sodium_hex2bin(<span class="string">&#x27;e9897cea109576c2f8088c277125d553e4f83afbc0abbb92cfb1f7b776b4fee0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$encrypted</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>] ?? <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$encrypted</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> json_encode(</span><br><span class="line">        [<span class="string">&#x27;message&#x27;</span> =&gt; <span class="literal">null</span>, <span class="string">&#x27;error&#x27;</span> =&gt; <span class="string">&#x27;no message provided&#x27;</span>],</span><br><span class="line">        JSON_PRETTY_PRINT</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$nonce</span> = sodium_hex2bin(substr(<span class="variable">$encrypted</span>, <span class="number">0</span>, <span class="number">48</span>));</span><br><span class="line"><span class="variable">$ciphertext</span> = sodium_hex2bin(substr(<span class="variable">$encrypted</span>, <span class="number">48</span>));</span><br><span class="line"><span class="variable">$plaintext</span> = sodium_crypto_secretbox_open(<span class="variable">$ciphertext</span>, <span class="variable">$nonce</span>, <span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> json_encode(</span><br><span class="line">    [<span class="string">&#x27;message&#x27;</span> =&gt; <span class="variable">$plaintext</span>, <span class="string">&#x27;original&#x27;</span> =&gt; <span class="variable">$encrypted</span>],</span><br><span class="line">    JSON_PRETTY_PRINT</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="把它放在一起"><a href="#把它放在一起" class="headerlink" title="把它放在一起"></a>把它放在一起</h3><p>当您键入一条消息并按下按钮时，它将对其进行加密并将十六进制编码的字符串发送到服务器。</p><p>然后，PHP代码将解密消息并以JSON响应返回纯文本。</p><p>然后，JavaScript代码将从JSON响应中获取纯文本，并将其附加到表单下方的输出字段。</p><h2 id="安全考虑因素"><a href="#安全考虑因素" class="headerlink" title="安全考虑因素"></a>安全考虑因素</h2><p>这只是一个示例，用来说明如何使用 <a href="https://github.com/paragonie/sodium-plus">sodium-plus</a>（JavaScript）和 libsodium（PHP）来加密/解密消息.</p><p>我们使用了很多<em>的</em>快捷方式，这些快捷方式是您在实际系统中不希望使用的（例如：对加密密钥进行硬编码，并为了简洁而避免进行错误检查）。</p><p>如果您想做更高级的事情 (<a href="https://github.com/paragonie/sodium-plus/blob/master/docs/SodiumPlus/sealed-boxes.md">JavaScript中的公钥加密</a> 和 <a href="https://paragonie.com/book/pecl-libsodium/read/08-advanced.md#crypto-box-seal">一致的PHP函数</a>), 该文档可在线免费获得。</p><blockquote><p>转载于 <a href="https://learnku.com/laravel/t/46851">https://learnku.com/laravel/t/46851</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.learnku.com/uploads/images/202007/03/1/HdUs6edXk0.png!large&quot; alt=&quot;Laravel&quot;&gt;&lt;/p&gt;
&lt;p&gt;只是为了好玩，让我们在客户端JavaScript中加密一些内容，然后让PHP服务器对其进行解密。请注意&lt;strong&gt;这个 &lt;a href=&quot;https://stackoverflow.com/a/12327375/2224584&quot;&gt;不会取代TLS (HTTPS)&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;使用-Nadium-Plus-的-JavaScript-加密&quot;&gt;&lt;a href=&quot;#使用-Nadium-Plus-的-JavaScript-加密&quot; class=&quot;headerlink&quot; title=&quot;使用 Nadium Plus 的 JavaScript 加密&quot;&gt;&lt;/a&gt;使用 Nadium Plus 的 JavaScript 加密&lt;/h3&gt;&lt;p&gt;你需要 &lt;a href=&quot;https://github.com/paragonie/sodium-plus/releases&quot;&gt;最新版的 sodium-plus&lt;/a&gt; （在撰写本文时，它是 &lt;a href=&quot;https://github.com/paragonie/sodium-plus/releases/tag/v0.4.0&quot;&gt;version 0.4.0&lt;/a&gt;.)&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>游戏 [英雄塔 Heroes Tower] 开发前构思</title>
    <link href="https://airy6.github.io/2020/07/06/%E6%B8%B8%E6%88%8F-%E8%8B%B1%E9%9B%84%E5%A1%94-Heroes-Tower-%E5%BC%80%E5%8F%91%E5%89%8D%E6%9E%84%E6%80%9D/"/>
    <id>https://airy6.github.io/2020/07/06/%E6%B8%B8%E6%88%8F-%E8%8B%B1%E9%9B%84%E5%A1%94-Heroes-Tower-%E5%BC%80%E5%8F%91%E5%89%8D%E6%9E%84%E6%80%9D/</id>
    <published>2020-07-06T14:29:03.000Z</published>
    <updated>2021-01-01T11:59:33.198Z</updated>
    
    <content type="html"><![CDATA[<p>最近闲来无事，准备作个简单的游戏来学习一些新的技术，也给自己定下几个近期目标，来督促自己。</p><p>游戏的类型还没有完全的确定，目前的想法只是做一个，选择英雄来闯关、冲塔、打怪的游戏模式。以后可能会增加游戏的可玩性，出更多的英雄和游戏模式。</p><a id="more"></a><p>因为前端技术的不足，所以准备做成一个文本游戏。</p><p>大概内容如下，玩家可以选择一个英雄（以后可能会考虑增加多英雄配合的模式）来作为游戏的主角，控制英雄进行游戏。</p><p>每种不同的英雄拥有各自的不同属性和技能（暂定为三个）属性大概就是：生命值、法力值、攻击力、魔法强度、物理抗性、魔法抗性等。</p><p>等级暂定为30级，可以通过打怪进行升级。每个英雄都有不同的随等级提升成长的属性值，通过升级或穿戴装备可以增加这些数值。道具则是多功能的，可以是：短暂增加英雄属性，回复英雄数值，提升等级，复活等。</p><p>每层塔都会有不同的怪物和BOOS或者没有BOOS，每层和每种怪都会提供不同的等级甚至会掉落专属装备和道具。</p><p>当然，为了游戏的可玩性，爆率会控制在一个较低范围内，掉落的物品也是概率性的。尽量避免出现闯关难度过低或过高的情况。</p><p>暂时先就这么多，再考虑一下其他因素，看看需要增加或者修改甚至删除哪个部分。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近闲来无事，准备作个简单的游戏来学习一些新的技术，也给自己定下几个近期目标，来督促自己。&lt;/p&gt;
&lt;p&gt;游戏的类型还没有完全的确定，目前的想法只是做一个，选择英雄来闯关、冲塔、打怪的游戏模式。以后可能会增加游戏的可玩性，出更多的英雄和游戏模式。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Heroes Tower" scheme="https://airy6.github.io/tags/Heroes-Tower/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 对关联表的一些操作</title>
    <link href="https://airy6.github.io/2020/07/06/Laravel%20%E5%AF%B9%E5%85%B3%E8%81%94%E8%A1%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>https://airy6.github.io/2020/07/06/Laravel%20%E5%AF%B9%E5%85%B3%E8%81%94%E8%A1%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</id>
    <published>2020-07-06T14:21:48.000Z</published>
    <updated>2021-01-01T11:58:48.782Z</updated>
    
    <content type="html"><![CDATA[<p>Laravel 为开发者提供了灵活且优雅的 model 层。不过，因为方法太多，有时总是忘记一些有用的方法。这里就一对多模型关联的中对关联表的一个方法 with 的用法做一个记录</p><p>在业务逻辑中，经常会有这样的场景，一个用户上传有多个图片，而图片只归属于一个用户，这个时候就需要一对多关联，假设用户表 users 和 图片表 images。images 表中有一个user_id 字段用来标记图片所属的用户。</p><a id="more"></a><p>在 users 模型中创建关联：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关联图片表</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">images</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;﻿</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Images::class, <span class="string">&#x27;user_id&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时访问集合中的 images 属性就可以访问到所有属于此用户的图片了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span>   = User::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$userId</span>))-&gt;first();</span><br><span class="line"><span class="comment">// 这里最好加上判断，如果是 null 就不存在 images 属性</span></span><br><span class="line"><span class="variable">$images</span> = <span class="variable">$user</span>-&gt;images;<span class="comment">// 这就是这个用户的所有图片</span></span><br></pre></td></tr></table></figure><p>然而，有时候我们不需要取出 images 表的所有字段，我们只需要 path 一个字段即可。</p><p>但如果直接使用 select([‘path’]) 方法的话，是查找的 users 表中的 path 字段，然而 users 表中并不存在 path 字段，这样使用会产生错误，这样就需要用到下面的方法。</p><blockquote><p>关于预加载用法可以参考 <a href="https://learnku.com/docs/laravel/6.x/eloquent-relationships/5177#012e7e">文档</a></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$images</span> = User::getAnchorByUuid(<span class="variable">$request</span>-&gt;get(<span class="string">&#x27;uuid&#x27;</span>))</span><br><span class="line">            -&gt;with([</span><br><span class="line">                <span class="string">&#x27;images&#x27;</span> =&gt; <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">                    <span class="variable">$query</span>-&gt;select([<span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;user_id&#x27;</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            ])</span><br><span class="line">            -&gt;first()</span><br><span class="line">            -&gt;images;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$images</span> = User::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$request</span>-&gt;get(<span class="string">&#x27;uuid&#x27;</span>))</span><br><span class="line">            -&gt;with(<span class="string">&#x27;images:path,user_id&#x27;</span>)</span><br><span class="line">            -&gt;first()</span><br><span class="line">            -&gt;images;</span><br></pre></td></tr></table></figure><p>with 可以使用字符串或者数组，数组的值可以是闭包函数，第一种方式更加灵活，第二种则更加简便，闭包中可以使用更多的方法，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$images</span> = User::getAnchorByUuid(<span class="variable">$request</span>-&gt;get(<span class="string">&#x27;uuid&#x27;</span>))</span><br><span class="line">            -&gt;with([</span><br><span class="line">                <span class="string">&#x27;images&#x27;</span> =&gt; <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">                    <span class="variable">$query</span>-&gt;orderByDesc(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">                    <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;status&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            ]);</span><br></pre></td></tr></table></figure><p>本篇文章就到此结束了，主要目的是为了记录一下 with 的用法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Laravel 为开发者提供了灵活且优雅的 model 层。不过，因为方法太多，有时总是忘记一些有用的方法。这里就一对多模型关联的中对关联表的一个方法 with 的用法做一个记录&lt;/p&gt;
&lt;p&gt;在业务逻辑中，经常会有这样的场景，一个用户上传有多个图片，而图片只归属于一个用户，这个时候就需要一对多关联，假设用户表 users 和 图片表 images。images 表中有一个user_id 字段用来标记图片所属的用户。&lt;/p&gt;</summary>
    
    
    
    <category term="Laravel" scheme="https://airy6.github.io/categories/Laravel/"/>
    
    
    <category term="Laravel" scheme="https://airy6.github.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>调休的一天</title>
    <link href="https://airy6.github.io/2020/01/11/%E8%B0%83%E4%BC%91%E7%9A%84%E4%B8%80%E5%A4%A9/"/>
    <id>https://airy6.github.io/2020/01/11/%E8%B0%83%E4%BC%91%E7%9A%84%E4%B8%80%E5%A4%A9/</id>
    <published>2020-01-11T07:30:21.000Z</published>
    <updated>2021-01-01T11:59:40.567Z</updated>
    
    <content type="html"><![CDATA[<p>周六，本来要休息的日子，我却还在上班😂</p><a id="more"></a><p>不过不是加班，谁让我上次调休休息过了。让我想起一句经典台词“出来混，迟早要还的”这不。来补班了嘛。</p><p>不过也挺好，人少清净，就连平时领导在时跟只鸡崽一样的同事，都大胆的玩起了游戏。真菜！</p><p><img src="http://blog.chongyunct.com/storage/canvas/images/t2804JlgNcRG7D8rwAeaHHNMMxTjhYqNU5ynCGlY.png" alt="avatar"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;周六，本来要休息的日子，我却还在上班😂&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
