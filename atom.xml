<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Airy</title>
  
  
  <link href="https://airy6.github.io/atom.xml" rel="self"/>
  
  <link href="https://airy6.github.io/"/>
  <updated>2021-01-05T08:57:36.382Z</updated>
  <id>https://airy6.github.io/</id>
  
  <author>
    <name>Airy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP8新特性之match表达式</title>
    <link href="https://airy6.github.io/e86f1941.html"/>
    <id>https://airy6.github.io/e86f1941.html</id>
    <published>2021-01-05T08:45:11.000Z</published>
    <updated>2021-01-05T08:57:36.382Z</updated>
    
    <content type="html"><![CDATA[<p>PHP8 alpha2发布了，最近引入了一个新的关键字：match, 这个关键字的作用跟switch有点类似。</p><p>虽然我一般对语法糖无感，但这个我觉得还是有点意思，match这个词也挺好看，那么它是干啥的呢？</p><a id="more"></a><p>在以前我们可能会经常使用switch做值转换类的工作，类似:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="variable">$input</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;true&quot;</span>:</span><br><span class="line">        <span class="variable">$result</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;false&quot;</span>:</span><br><span class="line">        <span class="variable">$result</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;null&quot;</span>:</span><br><span class="line">        <span class="variable">$result</span> = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(当然，有的同学会说，谁会这么写，用个数组转换不行么？ 拜托，这是举例啊，数组也只能数字键和整数啊，万一key是需要其他表达式呢，万一你要多个key对应一个值呢，对吧？)</p><p>那么如果使用match关键字呢，可以变成类似:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="keyword">match</span>(<span class="variable">$input</span>) &#123;</span><br><span class="line">        <span class="string">&quot;true&quot;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;false&quot;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;null&quot;</span> =&gt; <span class="literal">NULL</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>相比switch， match会直接返回值，可以直接赋值给<code>$result</code>了。</p><p>并且，类似switch的多个case一个block一样，match的多个条件也可以写在一起，比如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="keyword">match</span>(<span class="variable">$input</span>) &#123;</span><br><span class="line">    <span class="string">&quot;true&quot;</span>, <span class="string">&quot;on&quot;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;false&quot;</span>, <span class="string">&quot;off&quot;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;null&quot;</span>, <span class="string">&quot;empty&quot;</span>, <span class="string">&quot;NaN&quot;</span> =&gt; <span class="literal">NULL</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要注意的和switch不太一样的是，以前我们用switch可能会经常遇到这种诡异的问题:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$input</span> = <span class="string">&quot;2 person&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$input</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;bad&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现，bad竟然被输出了，这是因为switch使用了宽松比较<code>==</code>。match就不会有这个问题了, 它使用的是严格比较<code>===</code>，就是值和类型都要完全相等。</p><p>还有就是，当input并不能被match中的所有条件满足的时候，match会抛出一个UnhandledMatchError exception:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$input</span> = <span class="string">&quot;false&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="keyword">match</span>(<span class="variable">$input</span>) &#123;</span><br><span class="line">        <span class="string">&quot;true&quot;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>会得到:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fatal error: Uncaught UnhandledMatchError: Unhandled match value of type string</span><br></pre></td></tr></table></figure><p>这样就不用担心万一match条件没写全导致了不可预知的错误。</p><p>另外还是要说明，match是关键字，也就是从PHP8开始它不能出现在namespace或者类名中，如果你的项目中有用match作为类名的:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Match</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>在PHP8开始将会得到语法错误了, 当然，方法名中还是可以用的。</p><p>详细的，可以参考<a href="https://wiki.php.net/rfc/match_expression_v2">RFC：Match Expression</a></p><p>以上，没了。</p><blockquote><p>本文转载自 <a href="https://www.laruence.com/2020/07/13/6033.html">laruence.com</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;PHP8 alpha2发布了，最近引入了一个新的关键字：match, 这个关键字的作用跟switch有点类似。&lt;/p&gt;
&lt;p&gt;虽然我一般对语法糖无感，但这个我觉得还是有点意思，match这个词也挺好看，那么它是干啥的呢？&lt;/p&gt;</summary>
    
    
    
    <category term="PHP8" scheme="https://airy6.github.io/categories/PHP8/"/>
    
    
    <category term="转载" scheme="https://airy6.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
    <category term="PHP8" scheme="https://airy6.github.io/tags/PHP8/"/>
    
  </entry>
  
  <entry>
    <title>手摸手教你让 Laravel 开发 API 更得心应手</title>
    <link href="https://airy6.github.io/62cc6f9b.html"/>
    <id>https://airy6.github.io/62cc6f9b.html</id>
    <published>2021-01-04T07:52:43.000Z</published>
    <updated>2021-01-05T08:58:27.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>       随着前后端完全分离，<code>PHP</code>也基本告别了<code>view</code>模板嵌套开发，转而专门写资源接口。<code>Laravel</code>是PHP框架中最优雅的框架，国内也越来越多人告别<code>ThinkPHP</code>选择了<code>Laravel</code>。</p><a id="more"></a><p><code>Laravel</code>框架本身对<code>API</code>有支持，但是感觉再工作中还是需要再做一些处理。<code>Lumen</code>用起来不顺手，有些包不能很好地支持。所以，将<code>Laravel</code>框架进行一些配置处理，让其在开发<code>API</code>时更得心应手。</p><h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h1><h2 id="2-1-环境"><a href="#2-1-环境" class="headerlink" title="2.1. 环境"></a>2.1. 环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PHP &gt; 7.1</span><br><span class="line">MySQL &gt; 5.5</span><br><span class="line">Redis &gt; 2.8</span><br></pre></td></tr></table></figure><h2 id="2-2-工具"><a href="#2-2-工具" class="headerlink" title="2.2. 工具"></a>2.2. 工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postman</span><br><span class="line">composer</span><br></pre></td></tr></table></figure><h2 id="2-3-使用postman"><a href="#2-3-使用postman" class="headerlink" title="2.3. 使用postman"></a>2.3. 使用postman</h2><p>为了模拟AJAX请求，请将 <code>header头</code> 设置<code>X-Requested-With</code> 为 <code>XMLHttpRequest</code></p><p><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/le4MhxnAMV.png!large" alt="file"></p><h2 id="2-4-安装Laravel"><a href="#2-4-安装Laravel" class="headerlink" title="2.4. 安装Laravel"></a>2.4. 安装Laravel</h2><p><code>Laravel</code>只要<code>&gt;=5.5</code>皆可，这里采用文章编写时最新的<code>5.7</code>版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project laravel&#x2F;laravel Laravel --prefer-dist &quot;5.7.*&quot;</span><br></pre></td></tr></table></figure><h2 id="2-5-创建数据库"><a href="#2-5-创建数据库" class="headerlink" title="2.5. 创建数据库"></a>2.5. 创建数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;users&#96; (</span><br><span class="line">&#96;id&#96; INT UNSIGNED NOT NULL PRIMARY KEY auto_increment COMMENT &#39;主键ID&#39;,</span><br><span class="line">&#96;name&#96; VARCHAR ( 12 ) NOT NULL COMMENT &#39;用户名称&#39;,</span><br><span class="line">&#96;password&#96; VARCHAR ( 80 ) NOT NULL COMMENT &#39;密码&#39;,</span><br><span class="line">&#96;last_token&#96; text COMMENT &#39;登陆时的token&#39;,</span><br><span class="line">&#96;status&#96; TINYINT NOT NULL DEFAULT 0 COMMENT &#39;用户状态 -1代表已删除 0代表正常 1代表冻结&#39;,</span><br><span class="line">&#96;created_at&#96; TIMESTAMP NULL DEFAULT NULL COMMENT &#39;创建时间&#39;,</span><br><span class="line">&#96;updated_at&#96; TIMESTAMP NULL DEFAULT NULL COMMENT &#39;修改时间&#39; </span><br><span class="line">) ENGINE &#x3D; INNODB DEFAULT CHARSET &#x3D; utf8mb4 COLLATE &#x3D; utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><h1 id="3-初始化数据"><a href="#3-初始化数据" class="headerlink" title="3. 初始化数据"></a>3. 初始化数据</h1><h2 id="3-1-Model移动"><a href="#3-1-Model移动" class="headerlink" title="3.1. Model移动"></a>3.1. Model移动</h2><p>在项目的<code>app</code>目录下可以看到，有一个<code>User.php</code>的模型文件。因为<code>Laravel</code>默认把模型文件放在<code>app</code>目录下，如果数据表多的话，这里模型文件就会很多，不便于管理，所以我们先要将模型文件移动到其他文件夹内。</p><ol><li>在<code>app</code>目录下新建<code>Models</code>文件夹，然后将<code>User.php</code>文件移动进来。</li><li>修改<code>User.php</code>的内容<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>; <span class="comment">//这里从App改成了App\Models</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Notifiable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Notifiable</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">&#x27;users&#x27;</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//去掉我创建的数据表没有的字段</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$fillable</span> = [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;password&#x27;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">     <span class="comment">//去掉我创建的数据表没有的字段</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hidden</span> = [</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">//将密码进行加密</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPasswordAttribute</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;attributes[<span class="string">&#x27;password&#x27;</span>] = bcrypt(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>因为有关于User的命名空间发生了改变，所以我们全局搜索<code>App\User</code>,将其替换为<code>App\Models\User</code>.我一共搜索到4个文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app&#x2F;Http&#x2F;Controllers&#x2F;Auth 目录下的 RegisterController.php</span><br><span class="line">config 目录下的 services.php</span><br><span class="line">config 目录下的 auth.php</span><br><span class="line">database&#x2F;factories 目录下的 UserFactory.php</span><br></pre></td></tr></table></figure><h2 id="3-2-控制器"><a href="#3-2-控制器" class="headerlink" title="3.2. 控制器"></a>3.2. 控制器</h2></li></ol><p>因为是专门做API的，所以我们要把是API的控制器都放到<code>app\Http\Controllers\Api</code>目录下。</p><p>使用命令行创建控制器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:controller Api&#x2F;UserController</span><br></pre></td></tr></table></figure><p>编写<code>app/Http/Controllers/Api</code>目录下的<code>UserController.php</code>文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;guaosi&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里写了index函数，用来下面建立路由后的测试，查看是否可以正常访问。</p><h2 id="3-3-路由"><a href="#3-3-路由" class="headerlink" title="3.3. 路由"></a>3.3. 路由</h2><p>在<code>routes</code>目录下的<code>api.php</code>是专门用来写Api接口的路由，所以我们打开它，填写以下内容，做一个测试.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line">Route::namespace(<span class="string">&#x27;Api&#x27;</span>)-&gt;prefix(<span class="string">&#x27;v1&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Route::get(<span class="string">&#x27;/users&#x27;</span>,<span class="string">&#x27;UserController@index&#x27;</span>)-&gt;name(<span class="string">&#x27;users.index&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>因为我们Api控制器的命名空间是<code>App\Http\Controllers\Api</code>,而<code>Laravel</code>默认只会在命名空间<code>App\Http\Controllers</code>下查找控制器，所以需要我们给出<code>namespace</code>。</p></blockquote><blockquote><p>同时，添加一个<code>prefix</code>是为了版本号，方便后期接口升级区分。</p></blockquote><p>打开<code>postman</code>,用<code>get</code>方式请求<code>你的域名/api/v1/users</code>,最后返回结果是</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">guaosi</span><br></pre></td></tr></table></figure><p>则成功</p><h2 id="3-4-创建验证器"><a href="#3-4-创建验证器" class="headerlink" title="3.4. 创建验证器"></a>3.4. 创建验证器</h2><p>在创建用户之前，我们先创建验证器，来让我们服务器接收到的数据更安全.当然，我们也要把关于Api验证的放在一个专门的文件夹内。<br>先创建一个<code>Request</code>的基类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:request Api&#x2F;FormRequest</span><br></pre></td></tr></table></figure><p>因为验证器默认的权限验证是<code>false</code>，导致返回都是<code>403</code>的权限不通过错误。这里我们没有用到权限认证，为了方便处理，我们默认将权限都是通过的状态。所以，每个文件都需要我们将<code>false</code>改成<code>true</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authorize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//false代表权限验证不通过，返回403错误</span></span><br><span class="line"><span class="comment">//true代表权限认证通过</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们修改<code>app/Http/Requests/Api</code> 目录下的 <code>FormRequest.php</code> 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">FormRequest</span> <span class="title">as</span> <span class="title">BaseFormRequest</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormRequest</span> <span class="keyword">extends</span> <span class="title">BaseFormRequest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">authorize</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="comment">//false代表权限验证不通过，返回403错误</span></span><br><span class="line"><span class="comment">//true代表权限认证通过</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样这个命名空间下的验证器都会默认通过权限验证。当然，如果你需要权限验证，可以通过直接覆盖方法。</p><p>接着我们开始创建关于<code>UserController</code>的专属验证器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:request Api&#x2F;UserRequest</span><br></pre></td></tr></table></figure><p>编辑<code>app/Http/Requests/Api</code> 目录下的 <code>UserRequest.php</code>文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRequest</span> <span class="keyword">extends</span> <span class="title">FormRequest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">$this</span>-&gt;method()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> [</span><br><span class="line">                        <span class="string">&#x27;id&#x27;</span> =&gt; [<span class="string">&#x27;required,exists:shop_user,id&#x27;</span>]</span><br><span class="line">                    ];</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> [</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span> =&gt; [<span class="string">&#x27;required&#x27;</span>, <span class="string">&#x27;max:12&#x27;</span>, <span class="string">&#x27;unique:users,name&#x27;</span>],</span><br><span class="line">                        <span class="string">&#x27;password&#x27;</span> =&gt; [<span class="string">&#x27;required&#x27;</span>, <span class="string">&#x27;max:16&#x27;</span>, <span class="string">&#x27;min:6&#x27;</span>]</span><br><span class="line">                    ];</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;PATCH&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> [</span><br><span class="line"></span><br><span class="line">                    ];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">messages</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">&#x27;id.required&#x27;</span>=&gt;<span class="string">&#x27;用户ID必须填写&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;id.exists&#x27;</span>=&gt;<span class="string">&#x27;用户不存在&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;name.unique&#x27;</span> =&gt; <span class="string">&#x27;用户名已经存在&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;name.required&#x27;</span> =&gt; <span class="string">&#x27;用户名不能为空&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;name.max&#x27;</span> =&gt; <span class="string">&#x27;用户名最大长度为12个字符&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password.required&#x27;</span> =&gt; <span class="string">&#x27;密码不能为空&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password.max&#x27;</span> =&gt; <span class="string">&#x27;密码长度不能超过16个字符&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password.min&#x27;</span> =&gt; <span class="string">&#x27;密码长度不能小于6个字符&#x27;</span></span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-创建用户"><a href="#3-5-创建用户" class="headerlink" title="3.5. 创建用户"></a>3.5. 创建用户</h2><p>现在我们来编写创建用户接口，制作一些虚拟数据。(就不使用seeder来填充了)<br>打开<code>UserController.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户注册</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">UserRequest <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">    User::create(<span class="variable">$request</span>-&gt;all());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;用户注册成功。。。&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">Request <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$res</span>=Auth::guard(<span class="string">&#x27;web&#x27;</span>)-&gt;attempt([<span class="string">&#x27;name&#x27;</span>=&gt;<span class="variable">$request</span>-&gt;name,<span class="string">&#x27;password&#x27;</span>=&gt;<span class="variable">$request</span>-&gt;password]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;用户登录成功...&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;用户登录失败&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们创建路由，编辑<code>api.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Route::post(<span class="string">&#x27;/users&#x27;</span>,<span class="string">&#x27;UserController@store&#x27;</span>)-&gt;name(<span class="string">&#x27;users.store&#x27;</span>);</span><br><span class="line">Route::post(<span class="string">&#x27;/login&#x27;</span>,<span class="string">&#x27;UserController@login&#x27;</span>)-&gt;name(<span class="string">&#x27;users.login&#x27;</span>);</span><br></pre></td></tr></table></figure><p>打开<code>postman</code>,用<code>post</code>方式请求<code>你的域名/api/v1/users</code>,在<code>form-data</code>记得填写要创建的用户名和密码。</p><p>最后返回结果是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户创建成功。。。</span><br></pre></td></tr></table></figure><p>则成功。</p><p><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/Ea0rtpCMtC.png!large" alt="file"></p><p>如果返回</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;The given data was invalid.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;errors&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;用户名不能为空&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;密码不能为空&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则证明验证失败。</p><p>然后验证是否可以正常登录。因为我们认证的字段是<code>name</code>跟<code>password</code>,而<code>Laravel</code>默认认证的是<code>email</code>跟<code>password</code>。所以我们还要打开<code>app/Http/Controllers/auth</code> 目录下的 <code>LoginController.php</code>,加入如下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">username</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开<code>postman</code>,用<code>post</code>方式请求<code>你的域名/api/v1/login</code><br>最后返回结果是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户登录成功...</span><br></pre></td></tr></table></figure><p>则成功</p><p><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/xYz7wTN113.png!large" alt="file"></p><h2 id="3-6-创建10个用户"><a href="#3-6-创建10个用户" class="headerlink" title="3.6. 创建10个用户"></a>3.6. 创建10个用户</h2><p>为了测试使用，请自行通过接口创建10个用户。</p><h2 id="3-7-编写相关资源接口"><a href="#3-7-编写相关资源接口" class="headerlink" title="3.7. 编写相关资源接口"></a>3.7. 编写相关资源接口</h2><p>给出整体控制器信息<code>UserController.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>\<span class="title">UserRequest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回用户列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//3个用户为一页</span></span><br><span class="line">        <span class="variable">$users</span> = User::paginate(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$users</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回单一用户信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">User <span class="variable">$user</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用户注册</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">UserRequest <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">        User::create(<span class="variable">$request</span>-&gt;all());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;用户注册成功。。。&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用户登录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">Request <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$res</span>=Auth::guard(<span class="string">&#x27;web&#x27;</span>)-&gt;attempt([<span class="string">&#x27;name&#x27;</span>=&gt;<span class="variable">$request</span>-&gt;name,<span class="string">&#x27;password&#x27;</span>=&gt;<span class="variable">$request</span>-&gt;password]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$res</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;用户登录成功...&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;用户登录失败&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-8-编写路由"><a href="#3-8-编写路由" class="headerlink" title="3.8. 编写路由"></a>3.8. 编写路由</h2><p>给出整体路由信息<code>api.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line">Route::namespace(<span class="string">&#x27;Api&#x27;</span>)-&gt;prefix(<span class="string">&#x27;v1&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Route::get(<span class="string">&#x27;/users&#x27;</span>,<span class="string">&#x27;UserController@index&#x27;</span>)-&gt;name(<span class="string">&#x27;users.index&#x27;</span>);</span><br><span class="line">        Route::get(<span class="string">&#x27;/users/&#123;user&#125;&#x27;</span>,<span class="string">&#x27;UserController@show&#x27;</span>)-&gt;name(<span class="string">&#x27;users.show&#x27;</span>);</span><br><span class="line">        Route::post(<span class="string">&#x27;/users&#x27;</span>,<span class="string">&#x27;UserController@store&#x27;</span>)-&gt;name(<span class="string">&#x27;users.store&#x27;</span>);</span><br><span class="line">        Route::post(<span class="string">&#x27;/login&#x27;</span>,<span class="string">&#x27;UserController@login&#x27;</span>)-&gt;name(<span class="string">&#x27;users.login&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="4-存在问题"><a href="#4-存在问题" class="headerlink" title="4. 存在问题"></a>4. 存在问题</h1><p>以上所有返回的结果，无论正确或者错误，都没有一个统一格式规范，对开发<code>Api</code>不太友好的，需要我们进行一些修改，让Laravel框架可以更加友好地编写Api。</p><h1 id="5-构造"><a href="#5-构造" class="headerlink" title="5. 构造"></a>5. 构造</h1><h2 id="5-1-跨域问题"><a href="#5-1-跨域问题" class="headerlink" title="5.1. 跨域问题"></a>5.1. 跨域问题</h2><p>所有问题，跨域先行。跨域问题没有解决，一切处理都是纸老虎。这里我们使用medz做的<a href="https://learnku.com/laravel/t/8816/the-new-wheel-php-cors-cross-origin-resource-sharing-solves-the-cross-domain-requirements-of-the-php-project-program">cors扩展包</a></p><h3 id="5-1-1-安装medz-cors"><a href="#5-1-1-安装medz-cors" class="headerlink" title="5.1.1. 安装medz/cors"></a>5.1.1. 安装medz/cors</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require medz&#x2F;cors</span><br></pre></td></tr></table></figure><h3 id="5-1-2-发布配置文件"><a href="#5-1-2-发布配置文件" class="headerlink" title="5.1.2. 发布配置文件"></a>5.1.2. 发布配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider&#x3D;&quot;Medz\Cors\Laravel\Providers\LaravelServiceProvider&quot; --force</span><br></pre></td></tr></table></figure><h3 id="5-1-3-修改配置文件"><a href="#5-1-3-修改配置文件" class="headerlink" title="5.1.3. 修改配置文件"></a>5.1.3. 修改配置文件</h3><p>打开<code>config/cors.php</code>,在<code>expose-headers</code>添加值<code>Authorization</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">&#x27;expose-headers&#x27;</span>     =&gt; [<span class="string">&#x27;Authorization&#x27;</span>],</span><br><span class="line">    ......</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>这样跨域请求时，才能返回<code>header</code>头为<code>Authorization</code>的内容，否则在刷新用户<code>token</code>时不会返回刷新后的<code>token</code></p></blockquote><h3 id="5-1-4-增加中间件别名"><a href="#5-1-4-增加中间件别名" class="headerlink" title="5.1.4. 增加中间件别名"></a>5.1.4. 增加中间件别名</h3><p>打开<code>app/Http/Kernel.php</code>,增加一行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$routeMiddleware</span> = [</span><br><span class="line">        ...... <span class="comment">//前面的中间件</span></span><br><span class="line">        <span class="string">&#x27;cors&#x27;</span>=&gt; \Medz\Cors\Laravel\Middleware\ShouldGroup::class,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="5-1-5-修改路由"><a href="#5-1-5-修改路由" class="headerlink" title="5.1.5. 修改路由"></a>5.1.5. 修改路由</h3><p>打开<code>routes/api.php</code>,在路由组中增加使用中间件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Route::namespace(<span class="string">&#x27;Api&#x27;</span>)-&gt;prefix(<span class="string">&#x27;v1&#x27;</span>)-&gt;middleware(<span class="string">&#x27;cors&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        Route::get(<span class="string">&#x27;/users&#x27;</span>,<span class="string">&#x27;UserController@index&#x27;</span>)-&gt;name(<span class="string">&#x27;users.index&#x27;</span>);</span><br><span class="line">        Route::get(<span class="string">&#x27;/users/&#123;user&#125;&#x27;</span>,<span class="string">&#x27;UserController@show&#x27;</span>)-&gt;name(<span class="string">&#x27;users.show&#x27;</span>);</span><br><span class="line">        Route::post(<span class="string">&#x27;/users&#x27;</span>,<span class="string">&#x27;UserController@store&#x27;</span>)-&gt;name(<span class="string">&#x27;users.store&#x27;</span>);</span><br><span class="line">        Route::post(<span class="string">&#x27;/login&#x27;</span>,<span class="string">&#x27;UserController@login&#x27;</span>)-&gt;name(<span class="string">&#x27;users.login&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-2-统一Response响应处理"><a href="#5-2-统一Response响应处理" class="headerlink" title="5.2. 统一Response响应处理"></a>5.2. 统一Response响应处理</h2><p>接口主流返回<code>json</code>格式，其中包含<code>http状态码</code>，<code>status请求状态</code>，<code>data请求资源结果</code>等等。需要我们有一个API接口全局都能有统一的格式和对应的数据处理。参考于<a href="https://learnku.com/articles/6035/laravel55-developing-api-combat">这里</a>。</p><h3 id="5-2-1-封装返回的统一消息"><a href="#5-2-1-封装返回的统一消息" class="headerlink" title="5.2.1. 封装返回的统一消息"></a>5.2.1. 封装返回的统一消息</h3><p>在 <code>app/Api/Helpers</code> 目录(不存在目录自己新建)下新建 <code>ApiResponse.php</code><br>填入如下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Api</span>\<span class="title">Helpers</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>\<span class="title">Response</span> <span class="title">as</span> <span class="title">FoundationResponse</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Response</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">trait</span> ApiResponse</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$statusCode</span> = FoundationResponse::HTTP_OK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getStatusCode</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;statusCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $statusCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setStatusCode</span>(<span class="params"><span class="variable">$statusCode</span>,<span class="variable">$httpCode</span>=<span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$httpCode</span> = <span class="variable">$httpCode</span> ?? <span class="variable">$statusCode</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;statusCode = <span class="variable">$statusCode</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $header</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">respond</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$header</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response::json(<span class="variable">$data</span>,<span class="keyword">$this</span>-&gt;getStatusCode(),<span class="variable">$header</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> null $code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">status</span>(<span class="params"><span class="variable">$status</span>, <span class="keyword">array</span> <span class="variable">$data</span>, <span class="variable">$code</span> = <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$code</span>)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;setStatusCode(<span class="variable">$code</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$status</span> = [</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span> =&gt; <span class="variable">$status</span>,</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;statusCode</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$data</span> = array_merge(<span class="variable">$status</span>,<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;respond(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 格式</span></span><br><span class="line"><span class="comment">     * data:</span></span><br><span class="line"><span class="comment">     *  code:422</span></span><br><span class="line"><span class="comment">     *  message:xxx</span></span><br><span class="line"><span class="comment">     *  status:&#x27;error&#x27;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">failed</span>(<span class="params"><span class="variable">$message</span>, <span class="variable">$code</span> = FoundationResponse::HTTP_BAD_REQUEST,<span class="variable">$status</span> = <span class="string">&#x27;error&#x27;</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="variable">$code</span>)-&gt;message(<span class="variable">$message</span>,<span class="variable">$status</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">message</span>(<span class="params"><span class="variable">$message</span>, <span class="variable">$status</span> = <span class="string">&quot;success&quot;</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;status(<span class="variable">$status</span>,[</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span> =&gt; <span class="variable">$message</span></span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">internalError</span>(<span class="params"><span class="variable">$message</span> = <span class="string">&quot;Internal Error!&quot;</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="variable">$message</span>,FoundationResponse::HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">created</span>(<span class="params"><span class="variable">$message</span> = <span class="string">&quot;created&quot;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(FoundationResponse::HTTP_CREATED)</span><br><span class="line">            -&gt;message(<span class="variable">$message</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">success</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$status</span> = <span class="string">&quot;success&quot;</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;status(<span class="variable">$status</span>,compact(<span class="string">&#x27;data&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notFond</span>(<span class="params"><span class="variable">$message</span> = <span class="string">&#x27;Not Fond!&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="variable">$message</span>,Foundationresponse::HTTP_NOT_FOUND);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-新建Api控制器基类"><a href="#5-2-2-新建Api控制器基类" class="headerlink" title="5.2.2. 新建Api控制器基类"></a>5.2.2. 新建Api控制器基类</h3><p>在 <code>app/Http/Controller/Api</code> 目录下新建一个<code>Controller.php</code>作为<code>Api</code>专门的<code>基类</code>.<br>填入以下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Api</span>\<span class="title">Helpers</span>\<span class="title">ApiResponse</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Controller</span> <span class="title">as</span> <span class="title">BaseController</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">use</span> <span class="title">ApiResponse</span>;</span><br><span class="line">    <span class="comment">// 其他通用的Api帮助函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-3-继承Api控制器基类"><a href="#5-2-3-继承Api控制器基类" class="headerlink" title="5.2.3. 继承Api控制器基类"></a>5.2.3. 继承Api控制器基类</h3><p>让Api的控制器继承这个基类即可。<br>打开<code>UserController.php</code>文件，去掉命名空间<code>use App\Http\Controllers\Controller</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>\<span class="title">UserRequest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-4-如何使用"><a href="#5-2-4-如何使用" class="headerlink" title="5.2.4. 如何使用"></a>5.2.4. 如何使用</h3><p>得益于前面统一消息的封装，使用起来非常容易。<br>1.返回正确信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="string">&#x27;用户登录成功...&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2.返回正确资源信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="variable">$user</span>);</span><br></pre></td></tr></table></figure><p>3.返回自定义http状态码的正确信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success(<span class="string">&#x27;用户登录成功...&#x27;</span>);</span><br></pre></td></tr></table></figure><p>4.返回错误信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">&#x27;用户注册失败&#x27;</span>);</span><br></pre></td></tr></table></figure><p>5.返回自定义http状态码的错误信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">&#x27;用户登录失败&#x27;</span>,<span class="number">401</span>);</span><br></pre></td></tr></table></figure><p>6.返回自定义http状态码的错误信息,同时也想返回自己内部定义的错误码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">&#x27;用户登录失败&#x27;</span>,<span class="number">401</span>,<span class="number">10001</span>);</span><br></pre></td></tr></table></figure><blockquote><p>默认success返回的状态码是200，failed返回的状态码是400</p></blockquote><h3 id="5-2-5-修改用户控制器"><a href="#5-2-5-修改用户控制器" class="headerlink" title="5.2.5. 修改用户控制器"></a>5.2.5. 修改用户控制器</h3><p>我们将统一消息封装运用到<code>UserController</code>中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>\<span class="title">UserRequest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回用户列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//3个用户为一页</span></span><br><span class="line">        <span class="variable">$users</span> = User::paginate(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="variable">$users</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回单一用户信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">User <span class="variable">$user</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="variable">$user</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用户注册</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">UserRequest <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">        User::create(<span class="variable">$request</span>-&gt;all());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success(<span class="string">&#x27;用户注册成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用户登录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">Request <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$res</span>=Auth::guard(<span class="string">&#x27;web&#x27;</span>)-&gt;attempt([<span class="string">&#x27;name&#x27;</span>=&gt;<span class="variable">$request</span>-&gt;name,<span class="string">&#x27;password&#x27;</span>=&gt;<span class="variable">$request</span>-&gt;password]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$res</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success(<span class="string">&#x27;用户登录成功...&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">&#x27;用户登录失败&#x27;</span>,<span class="number">401</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-6-测试"><a href="#5-2-6-测试" class="headerlink" title="5.2.6. 测试"></a>5.2.6. 测试</h3><ol><li>返回用户列表<br>请求<code>http://你的域名/api/v1/users</code><br><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/MgY6gBEEHM.png!large" alt="file"></li><li>返回单一用户<br>请求<code>http://你的域名/api/v1/users/1</code><br><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/zmeLfnRmcZ.png!large" alt="file"></li><li>登陆正确<br>请求<code>http://你的域名/api/v1/login</code><br><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/6ZGWMcrWCA.png!large" alt="file"></li><li>登陆错误<br>请求<code>http://你的域名/api/v1/login</code><br><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/jQkIwUF0u1.png!large" alt="file"><h2 id="5-3-Api-Resource资源"><a href="#5-3-Api-Resource资源" class="headerlink" title="5.3. Api-Resource资源"></a>5.3. Api-Resource资源</h2></li></ol><p>在上面请求返回用户列表和返回单一用户时，返回的字段都是数据库里所有的字段，当然，不包含我们在<code>User</code>模型中去除的<code>password</code>字段。</p><h3 id="5-3-1-需求"><a href="#5-3-1-需求" class="headerlink" title="5.3.1. 需求"></a>5.3.1. 需求</h3><p>此时，我们如果想控制返回的字段有哪些，可以使用<code>select</code>或者使用<code>User</code>模型中的<code>hidden</code>数组来限制字段。</p><p>这2种办法虽然可以，但是扩展性太差。并且我想对<code>status</code>返回的形式进行修改，比如0的时候显示正常，1显示冻结，此时就需要遍历数据进行修改了。此时，Laravel提供的<code>API 资源</code>就可以很好地解决我们的问题。</p><blockquote><p>当构建 API 时，你往往需要一个转换层来联结你的 Eloquent 模型和实际返回给用户的 JSON 响应。Laravel 的资源类能够让你以更直观简便的方式将模型和模型集合转化成 JSON。</p></blockquote><blockquote><p>也就是在C层输出V层时，中间再来一层来专门处理字段问题，我们可以称之为<code>ViewModel</code>层。</p></blockquote><p>详细可以查看<a href="https://learnku.com/docs/laravel/5.7/eloquent-resources/2298">手册</a>如何使用。</p><h3 id="5-3-2-创建单一用户资源和列表用户资源"><a href="#5-3-2-创建单一用户资源和列表用户资源" class="headerlink" title="5.3.2. 创建单一用户资源和列表用户资源"></a>5.3.2. 创建单一用户资源和列表用户资源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:resource Api&#x2F;UserResource</span><br></pre></td></tr></table></figure><p>修改<code>app/Http/Resources/Api</code> 目录下的 <code>UserResource.php</code>文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Resources</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Resources</span>\<span class="title">Json</span>\<span class="title">JsonResource</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserResource</span> <span class="keyword">extends</span> <span class="title">JsonResource</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Transform the resource into an array.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"><span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">$this</span>-&gt;status)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">$this</span>-&gt;status = <span class="string">&#x27;已删除&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">$this</span>-&gt;status = <span class="string">&#x27;正常&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">$this</span>-&gt;status = <span class="string">&#x27;冻结&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>=&gt;<span class="keyword">$this</span>-&gt;id,</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;name,</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;status,</span><br><span class="line">            <span class="string">&#x27;created_at&#x27;</span>=&gt;(<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;created_at,</span><br><span class="line">            <span class="string">&#x27;updated_at&#x27;</span>=&gt;(<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;updated_at</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-3-如何使用"><a href="#5-3-3-如何使用" class="headerlink" title="5.3.3. 如何使用"></a>5.3.3. 如何使用</h3><p>返回单一用户(单一的资源)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> UserResource(<span class="variable">$user</span>));</span><br></pre></td></tr></table></figure><p>返回用户列表(资源列表)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> UserResource::collection(<span class="variable">$users</span>);</span><br><span class="line"><span class="comment">//这里不能用$this-&gt;success(UserResource::collection($users))</span></span><br><span class="line"><span class="comment">//否则不能返回分页标签信息</span></span><br></pre></td></tr></table></figure><h3 id="5-3-4-修改用户控制器"><a href="#5-3-4-修改用户控制器" class="headerlink" title="5.3.4. 修改用户控制器"></a>5.3.4. 修改用户控制器</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回用户列表</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//3个用户为一页</span></span><br><span class="line">    <span class="variable">$users</span> = User::paginate(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> UserResource::collection(<span class="variable">$users</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回单一用户信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">User <span class="variable">$user</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> UserResource(<span class="variable">$user</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-5-测试"><a href="#5-3-5-测试" class="headerlink" title="5.3.5. 测试"></a>5.3.5. 测试</h3><p>返回单一用户(单一的资源)<br><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/twtvLpxFxu.png!large" alt="file"><br>返回用户列表(资源列表)<br><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/KUD37DL6Zi.png!large" alt="file"></p><h2 id="5-4-Enum枚举"><a href="#5-4-Enum枚举" class="headerlink" title="5.4. Enum枚举"></a>5.4. Enum枚举</h2><p>我们常常会使用数字来代表状态，比如用户表，我们使用 <code>-1</code> 代表已删除 <code>0</code> 代表正常 <code>1</code> 代表冻结。</p><h3 id="5-4-1-两个问题"><a href="#5-4-1-两个问题" class="headerlink" title="5.4.1. 两个问题"></a>5.4.1. 两个问题</h3><ol><li><p>当我们判断一个用户，如果是删除或者冻结状态就不让其登陆了。判断代码这样写</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有可能状态有很多，所以这边就直接用 或 来判断不取反了。</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>-&gt;status==<span class="number">-1</span>||<span class="variable">$user</span>-&gt;status==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">// 不允许用户登录逻辑</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户正常登录逻辑</span></span><br></pre></td></tr></table></figure><p>上面逻辑和编写没有什么问题。因为是现在看，可以很明白的知道<code>-1</code> 代表已删除，<code>1</code> 代表冻结。但是如果一个月后再来看这行代码，早已经忘记了 <code>-1</code> 跟 <code>1</code> 具体表示的含义。</p></li><li><p>参考上面<code>UserResource.php</code>编写时，判断<code>status</code>具体状态函数，我们是使用<code>switch</code>语句。这样太不美观，而且地方用多了还容易冗余，每次编写都需要去查看每个数字代表的具体意思。</p></li></ol><h3 id="5-4-2-解决思路"><a href="#5-4-2-解决思路" class="headerlink" title="5.4.2. 解决思路"></a>5.4.2. 解决思路</h3><ol><li>第一个问题：为什么一段时间后再看就不知道<code>-1</code> 跟 <code>1</code> 具体表示的含义？</li></ol><p>       这是因为单纯的数字没有解释说明的作用，变量以及函数这些具有解释说明的作用，可以让我们立刻知道具体含义。</p><ol start="2"><li>第二个问题：如何给一个数字就能直接知道它代表的含义？</li></ol><p>       提供一个函数，返回这个数字代表的具体含义。</p><p>而这些，都可以使用<code>Enum枚举</code>可以解决。</p><h3 id="5-4-3-注意"><a href="#5-4-3-注意" class="headerlink" title="5.4.3. 注意"></a>5.4.3. 注意</h3><p><code>PHP</code>和<code>Laravel</code>框架本身是不支持<code>Enum枚举</code>的，不过我们可以模拟枚举的功能</p><h3 id="5-4-4-创建枚举"><a href="#5-4-4-创建枚举" class="headerlink" title="5.4.4. 创建枚举"></a>5.4.4. 创建枚举</h3><p>在 <code>app/Models</code> 下新建目录 <code>Enum</code> ,并在目录<code>Enum</code>下新建 <code>UserEnum.php</code> 文件，填写以下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Enum</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserEnum</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 状态类别</span></span><br><span class="line">    <span class="keyword">const</span> INVALID = <span class="number">-1</span>; <span class="comment">//已删除</span></span><br><span class="line">    <span class="keyword">const</span> NORMAL = <span class="number">0</span>; <span class="comment">//正常</span></span><br><span class="line">    <span class="keyword">const</span> FREEZE = <span class="number">1</span>; <span class="comment">//冻结</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getStatusName</span>(<span class="params"><span class="variable">$status</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$status</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">self</span>::INVALID:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;已删除&#x27;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">self</span>::NORMAL:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;正常&#x27;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">self</span>::FREEZE:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;冻结&#x27;</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;正常&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-5-使用"><a href="#5-4-5-使用" class="headerlink" title="5.4.5. 使用"></a>5.4.5. 使用</h3><p>1.表示具体含义</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有可能状态有很多，所以这边就直接用 或 来判断不取反了。</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>-&gt;status==UserEnum::INVALID||<span class="variable">$user</span>-&gt;status==UserEnum::FREEZE)&#123;</span><br><span class="line">    <span class="comment">// 不允许用户登录逻辑</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户正常登录逻辑</span></span><br></pre></td></tr></table></figure><p>2.修改<code>UserResource.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"><span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>=&gt;<span class="keyword">$this</span>-&gt;id,</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="keyword">$this</span>-&gt;name,</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span> =&gt; UserEnum::getStatusName(<span class="keyword">$this</span>-&gt;status),</span><br><span class="line">        <span class="string">&#x27;created_at&#x27;</span>=&gt;(<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;created_at,</span><br><span class="line">        <span class="string">&#x27;updated_at&#x27;</span>=&gt;(<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;updated_at</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再请求单一用户和用户列表接口，返回结果和之前一样。</p><h2 id="5-5-异常自定义处理"><a href="#5-5-异常自定义处理" class="headerlink" title="5.5. 异常自定义处理"></a>5.5. 异常自定义处理</h2><h3 id="5-5-1-再发现一个问题"><a href="#5-5-1-再发现一个问题" class="headerlink" title="5.5.1. 再发现一个问题"></a>5.5.1. 再发现一个问题</h3><p>我们在<code>UserController.php</code>文件中修改</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回单一用户信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">User <span class="variable">$user</span></span>)</span>&#123;</span><br><span class="line">    <span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> UserResource(<span class="variable">$user</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>故意报个错，请求看看结果<br><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/PYLjHqbuvv.png!large" alt="file"><br>我们再把设置成<code>ajax</code>的<code>header</code>头去掉<br><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/nCzqtib1RR.png!large" alt="file"></p><p>报错非常详细，并且把我们隐私设置都暴露出来了，这是由于我们<code>.env</code>的<code>APP_DEBUG</code>是<code>true</code>状态。我们不希望这些信息被其他访问者看到。我们改为<code>false</code>，再请求看看结果。</p><p><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/t8DJo0tk39.png!large" alt="file"></p><blockquote><p>嗯。很好，不仅别人看不到了，连我们自己都看不到了</p></blockquote><h3 id="5-5-2-需求"><a href="#5-5-2-需求" class="headerlink" title="5.5.2. 需求"></a>5.5.2. 需求</h3><ol><li>所有的异常信息都以统一<code>json</code>格式输出</li><li>因为我们是开发者，并且<code>.env</code>文件默认是不加入<code>git</code>上传线上的，我们希望可以当<code>APP_DEBUG</code>为<code>true</code>(本地)的时候可以继续显示详细的错误信息，<code>false</code>(线上)的时候就显示简要<code>json</code>信息，比如500。</li></ol><h3 id="5-5-3-创建自定义异常处理"><a href="#5-5-3-创建自定义异常处理" class="headerlink" title="5.5.3. 创建自定义异常处理"></a>5.5.3. 创建自定义异常处理</h3><p>在 <code>app/Api/Helpers</code> 目录下新建 <code>ExceptionReport.php</code> 文件，填入以下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Api</span>\<span class="title">Helpers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">Access</span>\<span class="title">AuthorizationException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">AuthenticationException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">ModelNotFoundException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Validation</span>\<span class="title">ValidationException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">MethodNotAllowedHttpException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">NotFoundHttpException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenInvalidException</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionReport</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">ApiResponse</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$exception</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$request</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$report</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ExceptionReport constructor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Request $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Exception $exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">Request <span class="variable">$request</span>, <span class="built_in">Exception</span> <span class="variable">$exception</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;request = <span class="variable">$request</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;exception = <span class="variable">$exception</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//当抛出这些异常时，可以使用我们定义的错误信息与HTTP状态码</span></span><br><span class="line">    <span class="comment">//可以把常见异常放在这里</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$doReport</span> = [</span><br><span class="line">        AuthenticationException::class =&gt; [<span class="string">&#x27;未授权&#x27;</span>,<span class="number">401</span>],</span><br><span class="line">        ModelNotFoundException::class =&gt; [<span class="string">&#x27;该模型未找到&#x27;</span>,<span class="number">404</span>],</span><br><span class="line">        AuthorizationException::class =&gt; [<span class="string">&#x27;没有此权限&#x27;</span>,<span class="number">403</span>],</span><br><span class="line">        ValidationException::class =&gt; [],</span><br><span class="line">        UnauthorizedHttpException::class=&gt;[<span class="string">&#x27;未登录或登录状态失效&#x27;</span>,<span class="number">422</span>],</span><br><span class="line">        TokenInvalidException::class=&gt;[<span class="string">&#x27;token不正确&#x27;</span>,<span class="number">400</span>],</span><br><span class="line">        NotFoundHttpException::class=&gt;[<span class="string">&#x27;没有找到该页面&#x27;</span>,<span class="number">404</span>],</span><br><span class="line">        MethodNotAllowedHttpException::class=&gt;[<span class="string">&#x27;访问方式不正确&#x27;</span>,<span class="number">405</span>],</span><br><span class="line">QueryException::class=&gt;[<span class="string">&#x27;参数错误&#x27;</span>,<span class="number">401</span>],</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"><span class="variable">$className</span>,<span class="keyword">callable</span> <span class="variable">$callback</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;doReport[<span class="variable">$className</span>] = <span class="variable">$callback</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shouldReturn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//只有请求包含是json或者ajax请求时才有效</span></span><br><span class="line"><span class="comment">//        if (! ($this-&gt;request-&gt;wantsJson() || $this-&gt;request-&gt;ajax()))&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            return false;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">foreach</span> (array_keys(<span class="keyword">$this</span>-&gt;doReport) <span class="keyword">as</span> <span class="variable">$report</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;exception <span class="keyword">instanceof</span> <span class="variable">$report</span>)&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;report = <span class="variable">$report</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Exception $e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> static</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params"><span class="built_in">Exception</span> <span class="variable">$e</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">static</span>(\request(),<span class="variable">$e</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">report</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;exception <span class="keyword">instanceof</span> ValidationException)&#123;</span><br><span class="line">            <span class="variable">$error</span> = array_first(<span class="keyword">$this</span>-&gt;exception-&gt;errors());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(array_first(<span class="variable">$error</span>),<span class="keyword">$this</span>-&gt;exception-&gt;status);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$message</span> = <span class="keyword">$this</span>-&gt;doReport[<span class="keyword">$this</span>-&gt;report];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="variable">$message</span>[<span class="number">0</span>],<span class="variable">$message</span>[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prodReport</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">&#x27;服务器错误&#x27;</span>,<span class="string">&#x27;500&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-4-捕捉异常"><a href="#5-5-4-捕捉异常" class="headerlink" title="5.5.4. 捕捉异常"></a>5.5.4. 捕捉异常</h3><p>修改 <code>app/Exceptions</code> 目录下的 <code>Handler.php</code> 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Exceptions</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Api</span>\<span class="title">Helpers</span>\<span class="title">ExceptionReport</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Exceptions</span>\<span class="title">Handler</span> <span class="title">as</span> <span class="title">ExceptionHandler</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">extends</span> <span class="title">ExceptionHandler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"><span class="variable">$request</span>, <span class="built_in">Exception</span> <span class="variable">$exception</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//ajax请求我们才捕捉异常</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$request</span>-&gt;ajax())&#123;</span><br><span class="line">            <span class="comment">// 将方法拦截到自己的ExceptionReport</span></span><br><span class="line">            <span class="variable">$reporter</span> = ExceptionReport::make(<span class="variable">$exception</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$reporter</span>-&gt;shouldReturn())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$reporter</span>-&gt;report();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(env(<span class="string">&#x27;APP_DEBUG&#x27;</span>))&#123;</span><br><span class="line">                <span class="comment">//开发环境，则显示详细错误信息</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">parent</span>::render(<span class="variable">$request</span>, <span class="variable">$exception</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//线上环境,未知错误，则显示500</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$reporter</span>-&gt;prodReport();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parent</span>::render(<span class="variable">$request</span>, <span class="variable">$exception</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-5-测试"><a href="#5-5-5-测试" class="headerlink" title="5.5.5. 测试"></a>5.5.5. 测试</h3><p>继续打开设置<code>AJAX</code>的<code>header</code>头</p><p>1.关闭<code>APP_DEBUG</code>，请求刚刚故意错误的接口。<br><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/ExjP7nbJ9E.png!large" alt="file"><br>2.开启<code>APP_DEBUG</code>，请求刚刚故意错误的接口。<br><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/h9xJOYFNHv.png!large" alt="file"><br>3.请求一个不存在的路由，查看返回结果。<br><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/xSiSqMS1GK.png!large" alt="file"></p><blockquote><p>其他的异常显示，自行测试啦~</p></blockquote><h2 id="5-6-jwt-auth"><a href="#5-6-jwt-auth" class="headerlink" title="5.6. jwt-auth"></a>5.6. jwt-auth</h2><p>在传统web中，我们一般是使用<code>session</code>来判定一个用户的登陆状态。而在<code>API</code>开发中，我们使用的是<code>token</code>。<code>jwt-token</code>是<code>Laravel</code>开发<code>API</code>用的比较多的。</p><blockquote><p>JWT 全称 JSON Web Tokens ，是一种规范化的 token。可以理解为对 token 这一技术提出一套规范，是在 RFC 7519 中提出的。</p></blockquote><p><code>jwt-auth</code>的详细介绍分析可以看<a href="https://learnku.com/articles/17883">JWT超详细分析</a>这篇文章，具体使用可以看<a href="https://learnku.com/articles/10885/full-use-of-jwt">JWT完整使用详解</a> 这篇文章。</p><h3 id="5-6-1-安装"><a href="#5-6-1-安装" class="headerlink" title="5.6.1. 安装"></a>5.6.1. 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require tymon&#x2F;jwt-auth 1.0.0-rc.3</span><br></pre></td></tr></table></figure><p>如果是<code>Laravel5.5</code>版本，则安装<code>rc.1</code>。如果是<code>Laravel5.6</code>版本，则安装<code>rc.2</code></p><h3 id="5-6-2-配置"><a href="#5-6-2-配置" class="headerlink" title="5.6.2. 配置"></a>5.6.2. 配置</h3><p>配置参考来自<a href="https://learnku.com/articles/7264/using-jwt-auth-to-implement-api-user-authentication-and-painless-refresh-access-token">使用 Jwt-Auth 实现 API 用户认证以及无痛刷新访问令牌</a></p><p>1.添加服务提供商<br>打开 <code>config</code> 目录下的 app.php文件，添加下面代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;providers&#x27;</span> =&gt; [</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    Tymon\JWTAuth\Providers\LaravelServiceProvider::class,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2.发布配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider&#x3D;&quot;Tymon\JWTAuth\Providers\LaravelServiceProvider&quot;</span><br></pre></td></tr></table></figure><p>此命令会在 <code>config</code> 目录下生成一个 <code>jwt.php</code> 配置文件，你可以在此进行自定义配置。</p><p>3.生成密钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan jwt:secret</span><br></pre></td></tr></table></figure><p>此命令会在你的 <code>.env</code> 文件中新增一行 <code>JWT_SECRET=secret</code>。以此来作为加密时使用的秘钥。</p><p>4.配置 Auth guard<br>打开 <code>config</code> 目录下的 auth.php文件，修改为下面代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;guards&#x27;</span> =&gt; [</span><br><span class="line">    <span class="string">&#x27;web&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;session&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;provider&#x27;</span> =&gt; <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;api&#x27;</span> =&gt; [</span><br><span class="line">       <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;jwt&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;provider&#x27;</span> =&gt; <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>这样，我们就能让api的用户认证变成使用<code>jwt</code>。</p><p>5.更改 Model</p><p>如果需要使用 <code>jwt-auth</code> 作为用户认证，我们需要对我们的 <code>User</code> 模型进行一点小小的改变，实现一个接口，变更后的 <code>User</code> 模型如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Notifiable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="title">as</span> <span class="title">Authenticatable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Contracts</span>\<span class="title">JWTSubject</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span> <span class="keyword">implements</span> <span class="title">JWTSubject</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Notifiable</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTIdentifier</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTCustomClaims</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>6.配置项详解<br><code>config</code>目录下的<code>jwt.php</code>文件配置详解</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    | JWT Authentication Secret</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    | 用于加密生成 token 的 secret</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;secret&#x27;</span> =&gt; env(<span class="string">&#x27;JWT_SECRET&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    | JWT Authentication Keys</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    | 如果你在 .env 文件中定义了 JWT_SECRET 的随机字符串</span></span><br><span class="line"><span class="comment">    | 那么 jwt 将会使用 对称算法 来生成 token</span></span><br><span class="line"><span class="comment">    | 如果你没有定有，那么jwt 将会使用如下配置的公钥和私钥来生成 token</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;keys&#x27;</span> =&gt; [</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        | Public Key</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        |</span></span><br><span class="line"><span class="comment">        | 公钥</span></span><br><span class="line"><span class="comment">        |</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;public&#x27;</span> =&gt; env(<span class="string">&#x27;JWT_PUBLIC_KEY&#x27;</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        | Private Key</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        |</span></span><br><span class="line"><span class="comment">        | 私钥</span></span><br><span class="line"><span class="comment">        |</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;private&#x27;</span> =&gt; env(<span class="string">&#x27;JWT_PRIVATE_KEY&#x27;</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        | Passphrase</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        |</span></span><br><span class="line"><span class="comment">        | 私钥的密码。 如果没有设置，可以为 null。</span></span><br><span class="line"><span class="comment">        |</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;passphrase&#x27;</span> =&gt; env(<span class="string">&#x27;JWT_PASSPHRASE&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    | JWT time to live</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    | 指定 access_token 有效的时间长度（以分钟为单位），默认为1小时，您也可以将其设置为空，以产生永不过期的标记</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;ttl&#x27;</span> =&gt; env(<span class="string">&#x27;JWT_TTL&#x27;</span>, <span class="number">60</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    | Refresh time to live</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    | 指定 access_token 可刷新的时间长度（以分钟为单位）。默认的时间为 2 周。</span></span><br><span class="line"><span class="comment">    | 大概意思就是如果用户有一个 access_token，那么他可以带着他的 access_token </span></span><br><span class="line"><span class="comment">    | 过来领取新的 access_token，直到 2 周的时间后，他便无法继续刷新了，需要重新登录。</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;refresh_ttl&#x27;</span> =&gt; env(<span class="string">&#x27;JWT_REFRESH_TTL&#x27;</span>, <span class="number">20160</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    | JWT hashing algorithm</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    | 指定将用于对令牌进行签名的散列算法。</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;algo&#x27;</span> =&gt; env(<span class="string">&#x27;JWT_ALGO&#x27;</span>, <span class="string">&#x27;HS256&#x27;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    | Required Claims</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    | 指定必须存在于任何令牌中的声明。</span></span><br><span class="line"><span class="comment">    | </span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;required_claims&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;iss&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;iat&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;exp&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;nbf&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sub&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;jti&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    | Persistent Claims</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    | 指定在刷新令牌时要保留的声明密钥。</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;persistent_claims&#x27;</span> =&gt; [</span><br><span class="line">        <span class="comment">// &#x27;foo&#x27;,</span></span><br><span class="line">        <span class="comment">// &#x27;bar&#x27;,</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    | Blacklist Enabled</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    | 为了使令牌无效，您必须启用黑名单。</span></span><br><span class="line"><span class="comment">    | 如果您不想或不需要此功能，请将其设置为 false。</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;blacklist_enabled&#x27;</span> =&gt; env(<span class="string">&#x27;JWT_BLACKLIST_ENABLED&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    | -------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    | Blacklist Grace Period</span></span><br><span class="line"><span class="comment">    | -------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    | 当多个并发请求使用相同的JWT进行时，</span></span><br><span class="line"><span class="comment">    | 由于 access_token 的刷新 ，其中一些可能会失败</span></span><br><span class="line"><span class="comment">    | 以秒为单位设置请求时间以防止并发的请求失败。</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;blacklist_grace_period&#x27;</span> =&gt; env(<span class="string">&#x27;JWT_BLACKLIST_GRACE_PERIOD&#x27;</span>, <span class="number">0</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    | Providers</span></span><br><span class="line"><span class="comment">    |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    | 指定整个包中使用的各种提供程序。</span></span><br><span class="line"><span class="comment">    |</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;providers&#x27;</span> =&gt; [</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        | JWT Provider</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        |</span></span><br><span class="line"><span class="comment">        | 指定用于创建和解码令牌的提供程序。</span></span><br><span class="line"><span class="comment">        |</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;jwt&#x27;</span> =&gt; Tymon\JWTAuth\Providers\JWT\Namshi::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        | Authentication Provider</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        |</span></span><br><span class="line"><span class="comment">        | 指定用于对用户进行身份验证的提供程序。</span></span><br><span class="line"><span class="comment">        |</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;auth&#x27;</span> =&gt; Tymon\JWTAuth\Providers\Auth\Illuminate::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        | Storage Provider</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        |</span></span><br><span class="line"><span class="comment">        | 指定用于在黑名单中存储标记的提供程序。</span></span><br><span class="line"><span class="comment">        |</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;storage&#x27;</span> =&gt; Tymon\JWTAuth\Providers\Storage\Illuminate::class,</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="5-6-3-测试"><a href="#5-6-3-测试" class="headerlink" title="5.6.3. 测试"></a>5.6.3. 测试</h3><p>1.我们在<code>UserController</code>控制器中将<code>login</code>方法进行修改以及新增一个<code>logout</code>方法用来退出登录还有<code>info</code>方法用来获取当前用户的信息。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">Request <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$token</span>=Auth::guard(<span class="string">&#x27;api&#x27;</span>)-&gt;attempt([<span class="string">&#x27;name&#x27;</span>=&gt;<span class="variable">$request</span>-&gt;name,<span class="string">&#x27;password&#x27;</span>=&gt;<span class="variable">$request</span>-&gt;password]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$token</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success([<span class="string">&#x27;token&#x27;</span> =&gt; <span class="string">&#x27;bearer &#x27;</span> . <span class="variable">$token</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">&#x27;账号或密码错误&#x27;</span>,<span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户退出</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Auth::guard(<span class="string">&#x27;api&#x27;</span>)-&gt;logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="string">&#x27;退出成功...&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回当前登录用户信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$user</span> = Auth::guard(<span class="string">&#x27;api&#x27;</span>)-&gt;user();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> UserResource(<span class="variable">$user</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.添加一下路由<br><code>routes/api.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前用户信息</span></span><br><span class="line">Route::get(<span class="string">&#x27;/users/info&#x27;</span>,<span class="string">&#x27;UserController@info&#x27;</span>)-&gt;name(<span class="string">&#x27;users.info&#x27;</span>);</span><br></pre></td></tr></table></figure><p>3.接着我们打开<code>postman</code>,请求<code>http://你的域名/api/v1/login</code>.可以看到接口返回的<code>token</code>.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">201</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC90ZXN0LmNvbVwvYXBpXC92MVwvbG9naW4iLCJpYXQiOjE1NTEzMzUyNzgsImV4cCI6MTU1MTMzODg3OCwibmJmIjoxNTUxMzM1Mjc4LCJqdGkiOiJrUzZSWHRoQVBkczR6ck4wIiwic3ViIjoxLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.FLk-JPFBDTWcItPRN8SVGaLI0j2zgiWLLs_MNKxCafQ&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.此时，我们打开<code>Postman</code>直接访问<code>http://你的域名/api/v1/users/info</code>,你会看到报了如下错误.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trying to get property &#39;id&#39; of non-object</span><br></pre></td></tr></table></figure><p>这是我们没有携带token导致的。报错不友好我们将在下面<code>自动刷新用户认证</code>解决。</p><p>5.我们在<code>Postman</code>的<code>Header</code>头部分再加一个<code>key</code>为<code>Authorization</code>，<code>value</code>为登陆成功后返回的<code>token</code>值，然后再次进行请求，可以看到成功返回当前登陆用户的信息。<br><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/jnYnXGv60I.png!large" alt="file"></p><h2 id="5-7-自动刷新用户认证"><a href="#5-7-自动刷新用户认证" class="headerlink" title="5.7. 自动刷新用户认证"></a>5.7. 自动刷新用户认证</h2><h3 id="5-7-1-需求"><a href="#5-7-1-需求" class="headerlink" title="5.7.1. 需求"></a>5.7.1. 需求</h3><p>现在我想用户登录后，为了保证安全性，每个小时该用户的token都会自动刷新为全新的，用旧的token请求不会通过。我们知道，用户如果token不对，就会退到当前界面重新登录来获得新的token，我同时希望虽然刷新了token，但是能否不要重新登录，就算重新登录也是一周甚至一个月之后呢？给用户一种无感知的体验。</p><p>看着感觉很神奇，我们一起手摸手来实现。</p><h3 id="5-7-2-自定义认证中间件"><a href="#5-7-2-自定义认证中间件" class="headerlink" title="5.7.2. 自定义认证中间件"></a>5.7.2. 自定义认证中间件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:middleware Api&#x2F;RefreshTokenMiddleware</span><br></pre></td></tr></table></figure><p>打开 <code>app/Http/Middleware/Api</code> 目录下的 <code>RefreshTokenMiddleware.php</code> 文件，填写以下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Auth</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">JWTException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Facades</span>\<span class="title">JWTAuth</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">BaseMiddleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenExpiredException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，我们要继承的是 jwt 的 BaseMiddleware</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefreshTokenMiddleware</span> <span class="keyword">extends</span> <span class="title">BaseMiddleware</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle an incoming request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Http\Request $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Closure $next</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span>, <span class="built_in">Closure</span> <span class="variable">$next</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 检查此次请求中是否带有 token，如果没有则抛出异常。</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;checkForToken(<span class="variable">$request</span>);</span><br><span class="line"><span class="comment">//         使用 try 包裹，以捕捉 token 过期所抛出的 TokenExpiredException  异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 检测用户的登录状态，如果正常则通过</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;parseToken()-&gt;authenticate()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">&#x27;jwt-auth&#x27;</span>, <span class="string">&#x27;未登录&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="comment">// 此处捕获到了 token 过期所抛出的 TokenExpiredException 异常，我们在这里需要做的是刷新该用户的 token 并将它添加到响应头中</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 刷新用户的 token</span></span><br><span class="line">                <span class="variable">$token</span> = <span class="keyword">$this</span>-&gt;auth-&gt;refresh();</span><br><span class="line">                <span class="comment">// 使用一次性登录以保证此次请求的成功</span></span><br><span class="line">                Auth::guard(<span class="string">&#x27;api&#x27;</span>)-&gt;onceUsingId(<span class="keyword">$this</span>-&gt;auth-&gt;manager()-&gt;getPayloadFactory()-&gt;buildClaimsCollection()-&gt;toPlainArray()[<span class="string">&#x27;sub&#x27;</span>]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JWTException <span class="variable">$exception</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果捕获到此异常，即代表 refresh 也过期了，用户无法刷新令牌，需要重新登录。</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">&#x27;jwt-auth&#x27;</span>, <span class="variable">$exception</span>-&gt;getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在响应头中返回新的 token</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setAuthenticationHeader(<span class="variable">$next</span>(<span class="variable">$request</span>), <span class="variable">$token</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-7-3-增加中间件别名"><a href="#5-7-3-增加中间件别名" class="headerlink" title="5.7.3. 增加中间件别名"></a>5.7.3. 增加中间件别名</h3><p>打开 <code>app/Http</code> 目录下的 <code>Kernel.php</code> 文件，添加如下一行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$routeMiddleware</span> = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">&#x27;api.refresh&#x27;</span>=&gt;\App\Http\Middleware\Api\RefreshTokenMiddleware::class,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="5-7-4-路由器修改"><a href="#5-7-4-路由器修改" class="headerlink" title="5.7.4. 路由器修改"></a>5.7.4. 路由器修改</h3><p>接着我们将路由进行修改，添加上我们写好的中间件。<br><code>routes/api.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line">Route::namespace(<span class="string">&#x27;Api&#x27;</span>)-&gt;prefix(<span class="string">&#x27;v1&#x27;</span>)-&gt;middleware(<span class="string">&#x27;cors&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//用户注册</span></span><br><span class="line">        Route::post(<span class="string">&#x27;/users&#x27;</span>,<span class="string">&#x27;UserController@store&#x27;</span>)-&gt;name(<span class="string">&#x27;users.store&#x27;</span>);</span><br><span class="line">        <span class="comment">//用户登录</span></span><br><span class="line">        Route::post(<span class="string">&#x27;/login&#x27;</span>,<span class="string">&#x27;UserController@login&#x27;</span>)-&gt;name(<span class="string">&#x27;users.login&#x27;</span>);</span><br><span class="line">        Route::middleware(<span class="string">&#x27;api.refresh&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//当前用户信息</span></span><br><span class="line">            Route::get(<span class="string">&#x27;/users/info&#x27;</span>,<span class="string">&#x27;UserController@info&#x27;</span>)-&gt;name(<span class="string">&#x27;users.info&#x27;</span>);</span><br><span class="line">            <span class="comment">//用户列表</span></span><br><span class="line">            Route::get(<span class="string">&#x27;/users&#x27;</span>,<span class="string">&#x27;UserController@index&#x27;</span>)-&gt;name(<span class="string">&#x27;users.index&#x27;</span>);</span><br><span class="line">            <span class="comment">//用户信息</span></span><br><span class="line">            Route::get(<span class="string">&#x27;/users/&#123;user&#125;&#x27;</span>,<span class="string">&#x27;UserController@show&#x27;</span>)-&gt;name(<span class="string">&#x27;users.show&#x27;</span>);</span><br><span class="line">            <span class="comment">//用户退出</span></span><br><span class="line">            Route::get(<span class="string">&#x27;/logout&#x27;</span>,<span class="string">&#x27;UserController@logout&#x27;</span>)-&gt;name(<span class="string">&#x27;users.logout&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-7-5-测试"><a href="#5-7-5-测试" class="headerlink" title="5.7.5. 测试"></a>5.7.5. 测试</h3><p>1.此时我们再次不携带token，使用<code>Postman</code>直接访问<code>http://你的域名/api/v1/users/info</code>,返回如下错误</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">422</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;未登录或登录状态失效&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.那随便输入token又会是怎么样呢？我们也来尝试一下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;token不正确&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.现在，我们再做一个如果<code>token</code>过期了，但是刷新限制没有过期的情况，看看会有什么结果。我们先将<code>config/jwt.php</code>里的<code>ttl</code>从<code>60</code>改成<code>1</code>。意味着重新生成的token将会1分钟后过期。</p><p>然后我们重新登录获取到<code>token</code>，替换<code>/api/v1/users/info</code>原有的token，进行访问，可以正常返回用户的信息。</p><p>等过了一分钟，我们再进行访问，发现依旧可以返回用户信息，但是我们在返回的<code>Headers</code>的<code>Authorization</code>可以看到新的<code>token</code>。<br><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/rPx1FRAcbH.png!large" alt="file"><br>此时如果我们再次访问，则报出异常</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">422</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;未登录或登录状态失效&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们替换上新的<code>token</code>，再次访问，访问正常通过。</p><p>4.现在，我们接着继续做<code>token</code>和刷新时间都过期的情况，会发生什么。我们再将<code>config/jwt.php</code>里的<code>refresh_ttl</code>从<code>20160</code>改成<code>2</code>。</p><p>重新按照3步骤执行一次，当刚过一分钟时，返回结果与3相同，都是正常返回信息并且在<code>Headers</code>携带了新的token。</p><p>当2分钟过后，报如下错误信息。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">422</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;未登录或登录状态失效&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.为了后面的方便，我们将修改的<code>ttl</code>和<code>refresh_ttl</code>的时间复原。</p><h3 id="5-7-6-前端逻辑"><a href="#5-7-6-前端逻辑" class="headerlink" title="5.7.6. 前端逻辑"></a>5.7.6. 前端逻辑</h3><p>上面可以看出，当token过期或者无效以及乱写，返回的<code>HTTP状态码</code>都是<code>422</code>。这是因为这个异常被我们上面自定义异常捕捉了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnauthorizedHttpException::class=&gt;[<span class="string">&#x27;未登录或登录状态失效&#x27;</span>,<span class="number">422</span>],</span><br></pre></td></tr></table></figure><p>所以，可以跟前端小伙伴商量一个状态码，专门表示接收到这个状态码就要退回重新登录了。当<code>Header</code>头携带<code>Authorization</code>时，就要及时自动替换新的token，不需要回到重新登录界面。这样用户就能完全无感知啦~</p><h2 id="5-8-多角色认证"><a href="#5-8-多角色认证" class="headerlink" title="5.8. 多角色认证"></a>5.8. 多角色认证</h2><p>如果我们的系统不仅仅只有一种角色身份，还有其他的角色身份需要认证呢？目前我们的角色认证是认证<code>Users</code>表的，如果我们再加入一个<code>Admins</code>表，也要角色认证要如何操作?</p><h3 id="5-8-1-Admin用户表"><a href="#5-8-1-Admin用户表" class="headerlink" title="5.8.1. Admin用户表"></a>5.8.1. Admin用户表</h3><p>我们将数据库的<code>Users</code>表复制一份，将其命名为<code>Admins</code>表，并且将其中的一个用户名进行修改，以示区别。</p><h3 id="5-8-2-框架文件"><a href="#5-8-2-框架文件" class="headerlink" title="5.8.2. 框架文件"></a>5.8.2. 框架文件</h3><p>我们分别将<code>User.php</code>模型文件，<code>UserEnum.php</code>枚举文件,<code>UserResource.php</code>资源文件，<code>UserRequest.php</code>验证器文件<code>UserController.php</code>控制器文件各复制一份，更改为<code>Admin</code>的，并将其中内容也改为<code>Admin</code>相关。因为就是复制粘贴，把<code>user</code>改成<code>admin</code>,由于篇幅问题具体修改过程我就不放代码了。具体的可以看下面的<code>成品</code></p><h3 id="5-8-3-用户认证文件"><a href="#5-8-3-用户认证文件" class="headerlink" title="5.8.3. 用户认证文件"></a>5.8.3. 用户认证文件</h3><p>打开<code>config/auth.php</code>文件，修改如下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;guards&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;web&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;session&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;provider&#x27;</span> =&gt; <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;api&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;jwt&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;provider&#x27;</span> =&gt; <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;admin&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;jwt&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;provider&#x27;</span> =&gt; <span class="string">&#x27;admins&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">],</span><br><span class="line"><span class="string">&#x27;providers&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;users&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;eloquent&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;model&#x27;</span> =&gt; App\Models\User::class,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;admins&#x27;</span> =&gt; [</span><br><span class="line">            <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;eloquent&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;model&#x27;</span> =&gt; App\Models\Admin::class,</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// &#x27;users&#x27; =&gt; [</span></span><br><span class="line">        <span class="comment">//     &#x27;driver&#x27; =&gt; &#x27;database&#x27;,</span></span><br><span class="line">        <span class="comment">//     &#x27;table&#x27; =&gt; &#x27;users&#x27;,</span></span><br><span class="line">        <span class="comment">// ],</span></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>此时，guard守护就多了一个<code>admin</code>，当<code>Auth::guard(&#39;admin&#39;)</code>时，就会自动查找<code>Admin</code>模型文件，这样就能跟上面的<code>User</code>模型认证分开了。</p><h3 id="5-8-4-刷新用户认证中间件"><a href="#5-8-4-刷新用户认证中间件" class="headerlink" title="5.8.4. 刷新用户认证中间件"></a>5.8.4. 刷新用户认证中间件</h3><p>我们需要再复制一个刷新用户认证的中间件，专门为<code>admin</code>认证以及刷新<code>token</code>.<br><code>app/Http/Middleware/Api/RefreshAdminTokenMiddleware.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Auth</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">JWTException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Facades</span>\<span class="title">JWTAuth</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">BaseMiddleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenExpiredException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，我们要继承的是 jwt 的 BaseMiddleware</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefreshAdminTokenMiddleware</span> <span class="keyword">extends</span> <span class="title">BaseMiddleware</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle an incoming request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Http\Request $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Closure $next</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span>, <span class="built_in">Closure</span> <span class="variable">$next</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 检查此次请求中是否带有 token，如果没有则抛出异常。</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;checkForToken(<span class="variable">$request</span>);</span><br><span class="line"><span class="comment">//         使用 try 包裹，以捕捉 token 过期所抛出的 TokenExpiredException  异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 检测用户的登录状态，如果正常则通过</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;parseToken()-&gt;authenticate()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">&#x27;jwt-auth&#x27;</span>, <span class="string">&#x27;未登录&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="comment">// 此处捕获到了 token 过期所抛出的 TokenExpiredException 异常，我们在这里需要做的是刷新该用户的 token 并将它添加到响应头中</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 刷新用户的 token</span></span><br><span class="line">                <span class="variable">$token</span> = <span class="keyword">$this</span>-&gt;auth-&gt;refresh();</span><br><span class="line">                <span class="comment">// 使用一次性登录以保证此次请求的成功</span></span><br><span class="line">                Auth::guard(<span class="string">&#x27;admin&#x27;</span>)-&gt;onceUsingId(<span class="keyword">$this</span>-&gt;auth-&gt;manager()-&gt;getPayloadFactory()-&gt;buildClaimsCollection()-&gt;toPlainArray()[<span class="string">&#x27;sub&#x27;</span>]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JWTException <span class="variable">$exception</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果捕获到此异常，即代表 refresh 也过期了，用户无法刷新令牌，需要重新登录。</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">&#x27;jwt-auth&#x27;</span>, <span class="variable">$exception</span>-&gt;getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在响应头中返回新的 token</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setAuthenticationHeader(<span class="variable">$next</span>(<span class="variable">$request</span>), <span class="variable">$token</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-8-5-增加中间件别名"><a href="#5-8-5-增加中间件别名" class="headerlink" title="5.8.5. 增加中间件别名"></a>5.8.5. 增加中间件别名</h3><p>打开 app/Http 目录下的 Kernel.php 文件，添加如下一行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$routeMiddleware</span> = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">&#x27;admin.refresh&#x27;</span>=&gt;\App\Http\Middleware\Api\RefreshAdminTokenMiddleware::class,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="5-8-6-路由文件"><a href="#5-8-6-路由文件" class="headerlink" title="5.8.6. 路由文件"></a>5.8.6. 路由文件</h3><p>routes/api.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line">Route::namespace(<span class="string">&#x27;Api&#x27;</span>)-&gt;prefix(<span class="string">&#x27;v1&#x27;</span>)-&gt;middleware(<span class="string">&#x27;cors&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//用户注册</span></span><br><span class="line">    Route::post(<span class="string">&#x27;/users&#x27;</span>, <span class="string">&#x27;UserController@store&#x27;</span>)-&gt;name(<span class="string">&#x27;users.store&#x27;</span>);</span><br><span class="line">    <span class="comment">//用户登录</span></span><br><span class="line">    Route::post(<span class="string">&#x27;/login&#x27;</span>, <span class="string">&#x27;UserController@login&#x27;</span>)-&gt;name(<span class="string">&#x27;users.login&#x27;</span>);</span><br><span class="line">    Route::middleware(<span class="string">&#x27;api.refresh&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//当前用户信息</span></span><br><span class="line">        Route::get(<span class="string">&#x27;/users/info&#x27;</span>, <span class="string">&#x27;UserController@info&#x27;</span>)-&gt;name(<span class="string">&#x27;users.info&#x27;</span>);</span><br><span class="line">        <span class="comment">//用户列表</span></span><br><span class="line">        Route::get(<span class="string">&#x27;/users&#x27;</span>, <span class="string">&#x27;UserController@index&#x27;</span>)-&gt;name(<span class="string">&#x27;users.index&#x27;</span>);</span><br><span class="line">        <span class="comment">//用户信息</span></span><br><span class="line">        Route::get(<span class="string">&#x27;/users/&#123;user&#125;&#x27;</span>, <span class="string">&#x27;UserController@show&#x27;</span>)-&gt;name(<span class="string">&#x27;users.show&#x27;</span>);</span><br><span class="line">        <span class="comment">//用户退出</span></span><br><span class="line">        Route::get(<span class="string">&#x27;/logout&#x27;</span>, <span class="string">&#x27;UserController@logout&#x27;</span>)-&gt;name(<span class="string">&#x27;users.logout&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//管理员注册</span></span><br><span class="line">    Route::post(<span class="string">&#x27;/admins&#x27;</span>, <span class="string">&#x27;AdminController@store&#x27;</span>)-&gt;name(<span class="string">&#x27;admins.store&#x27;</span>);</span><br><span class="line">    <span class="comment">//管理员登录</span></span><br><span class="line">    Route::post(<span class="string">&#x27;/admin/login&#x27;</span>, <span class="string">&#x27;AdminController@login&#x27;</span>)-&gt;name(<span class="string">&#x27;admins.login&#x27;</span>);</span><br><span class="line">    Route::middleware(<span class="string">&#x27;admin.refresh&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//当前管理员信息</span></span><br><span class="line">        Route::get(<span class="string">&#x27;/admins/info&#x27;</span>, <span class="string">&#x27;AdminController@info&#x27;</span>)-&gt;name(<span class="string">&#x27;admins.info&#x27;</span>);</span><br><span class="line">        <span class="comment">//管理员列表</span></span><br><span class="line">        Route::get(<span class="string">&#x27;/admins&#x27;</span>, <span class="string">&#x27;AdminController@index&#x27;</span>)-&gt;name(<span class="string">&#x27;admins.index&#x27;</span>);</span><br><span class="line">        <span class="comment">//管理员信息</span></span><br><span class="line">        Route::get(<span class="string">&#x27;/admins/&#123;user&#125;&#x27;</span>, <span class="string">&#x27;AdminController@show&#x27;</span>)-&gt;name(<span class="string">&#x27;admins.show&#x27;</span>);</span><br><span class="line">        <span class="comment">//管理员退出</span></span><br><span class="line">        Route::get(<span class="string">&#x27;/admins/logout&#x27;</span>, <span class="string">&#x27;AdminController@logout&#x27;</span>)-&gt;name(<span class="string">&#x27;admins.logout&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-8-7-控制器文件"><a href="#5-8-7-控制器文件" class="headerlink" title="5.8.7. 控制器文件"></a>5.8.7. 控制器文件</h3><p><code>app/Http/Controllers/Api/AdminController.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>\<span class="title">Api</span>\<span class="title">UserRequest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Resources</span>\<span class="title">Api</span>\<span class="title">AdminResource</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Admin</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Auth</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回用户列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//3个用户为一页</span></span><br><span class="line">        <span class="variable">$admins</span> = Admin::paginate(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> AdminResource::collection(<span class="variable">$admins</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回单一用户信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">Admin <span class="variable">$admin</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> AdminResource(<span class="variable">$admin</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回当前登录用户信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Auth::guard(<span class="string">&#x27;admin&#x27;</span>)-&gt;user();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="keyword">new</span> AdminResource(<span class="variable">$admins</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用户注册</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">UserRequest <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">        Admin::create(<span class="variable">$request</span>-&gt;all());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success(<span class="string">&#x27;用户注册成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用户登录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">Request <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$token</span>=Auth::guard(<span class="string">&#x27;admin&#x27;</span>)-&gt;attempt([<span class="string">&#x27;name&#x27;</span>=&gt;<span class="variable">$request</span>-&gt;name,<span class="string">&#x27;password&#x27;</span>=&gt;<span class="variable">$request</span>-&gt;password]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$token</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success([<span class="string">&#x27;token&#x27;</span> =&gt; <span class="string">&#x27;bearer &#x27;</span> . <span class="variable">$token</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">&#x27;账号或密码错误&#x27;</span>,<span class="number">400</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用户退出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Auth::guard(<span class="string">&#x27;admin&#x27;</span>)-&gt;logout();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="string">&#x27;退出成功...&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-8-8-测试"><a href="#5-8-8-测试" class="headerlink" title="5.8.8. 测试"></a>5.8.8. 测试</h3><p>我们将<code>admin</code>这边登陆返回的token放在<code>admin</code>的请求用户信息接口，看看会不会串号。结果返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;guaosi123&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;正常&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span>: <span class="string">&quot;2019-02-26 08:12:31&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;updated_at&quot;</span>: <span class="string">&quot;2019-02-26 08:12:31&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再将token放在<code>user</code>的请求用户信息接口，看看会不会串号。结果返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;guaosi123&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;正常&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span>: <span class="string">&quot;2019-02-26 08:12:31&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;updated_at&quot;</span>: <span class="string">&quot;2019-03-01 01:48:12&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看来<code>jwt-auth</code>真的串号了，这个问题我们下面再开一个标题进行解决。</p><h3 id="5-8-9-自动区分guard"><a href="#5-8-9-自动区分guard" class="headerlink" title="5.8.9. 自动区分guard"></a>5.8.9. 自动区分guard</h3><p>1.当我们编写登陆，退出，获取当前用户信息的时候，都需要</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Auth::guard(<span class="string">&#x27;admin&#x27;</span>)</span><br></pre></td></tr></table></figure><p>通过制定<code>guard</code>的具体守护是哪一个。因为框架默认的<code>guard</code>默认守护的是<code>web</code>。</p><p>所以，我希望可以让<code>guard</code>自动化，如果我请求的是<code>users</code>的，我就守护<code>api</code>。如果我请求的是<code>admins</code>的，我就守护<code>admin</code>。</p><p>接下来，就以<code>admins</code>的为例，<code>users</code>的保持不动</p><p>2.新建中间件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:middleware Api&#x2F;AdminGuardMiddleware</span><br></pre></td></tr></table></figure><p>打开<code>app/Http/Middleware/Api/AdminGuardMiddleware.php</code> 文件，填入以下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">Api</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminGuardMiddleware</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle an incoming request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Http\Request $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Closure $next</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span>, <span class="built_in">Closure</span> <span class="variable">$next</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        config([<span class="string">&#x27;auth.defaults.guard&#x27;</span>=&gt;<span class="string">&#x27;admin&#x27;</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.添加中间件别名<br>打开 <code>app/Http</code> 目录下的 <code>Kernel.php</code> 文件，添加如下一行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$routeMiddleware</span> = [</span><br><span class="line">    ......</span><br><span class="line">    <span class="string">&#x27;admin.guard&#x27;</span>=&gt;\App\Http\Middleware\Api\AdminGuardMiddleware::class,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>4.修改路由<br>接着我们将路由进行修改，添加上我们写好的中间件。<br><code>routes/api.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Route::middleware(<span class="string">&#x27;admin.guard&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//管理员注册</span></span><br><span class="line">        Route::post(<span class="string">&#x27;/admins&#x27;</span>, <span class="string">&#x27;AdminController@store&#x27;</span>)-&gt;name(<span class="string">&#x27;admins.store&#x27;</span>);</span><br><span class="line">        <span class="comment">//管理员登录</span></span><br><span class="line">        Route::post(<span class="string">&#x27;/admin/login&#x27;</span>, <span class="string">&#x27;AdminController@login&#x27;</span>)-&gt;name(<span class="string">&#x27;admins.login&#x27;</span>);</span><br><span class="line">        Route::middleware(<span class="string">&#x27;admin.refresh&#x27;</span>)-&gt;group(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//当前管理员信息</span></span><br><span class="line">            Route::get(<span class="string">&#x27;/admins/info&#x27;</span>, <span class="string">&#x27;AdminController@info&#x27;</span>)-&gt;name(<span class="string">&#x27;admins.info&#x27;</span>);</span><br><span class="line">            <span class="comment">//管理员列表</span></span><br><span class="line">            Route::get(<span class="string">&#x27;/admins&#x27;</span>, <span class="string">&#x27;AdminController@index&#x27;</span>)-&gt;name(<span class="string">&#x27;admins.index&#x27;</span>);</span><br><span class="line">            <span class="comment">//管理员信息</span></span><br><span class="line">            Route::get(<span class="string">&#x27;/admins/&#123;user&#125;&#x27;</span>, <span class="string">&#x27;AdminController@show&#x27;</span>)-&gt;name(<span class="string">&#x27;admins.show&#x27;</span>);</span><br><span class="line">            <span class="comment">//管理员退出</span></span><br><span class="line">            Route::get(<span class="string">&#x27;/admins/logout&#x27;</span>, <span class="string">&#x27;AdminController@logout&#x27;</span>)-&gt;name(<span class="string">&#x27;admins.logout&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>5.修改控制器<br><code>app/Http/Controllers/Api/AdminController.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回当前登录用户信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$admins</span> = Auth::user();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(newAdminResource(<span class="variable">$admins</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">Request <span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$token</span>=Auth::attempt([<span class="string">&#x27;name&#x27;</span>=&gt;<span class="variable">$request</span>-&gt;name,<span class="string">&#x27;password&#x27;</span>=&gt;<span class="variable">$request</span>-&gt;password]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$token</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success([<span class="string">&#x27;token&#x27;</span> =&gt; <span class="string">&#x27;bearer &#x27;</span> . <span class="variable">$token</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">&#x27;账号或密码错误&#x27;</span>,<span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户退出</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Auth::logout();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;success(<span class="string">&#x27;退出成功...&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.测试结果<br>将<code>admin</code>登陆后的token再次携带访问<code>/api/v1/admins/info</code>,依旧可以正常输出当前用户信息。</p><blockquote><p>user的自动区分请自己填写，这里就不再啰嗦一遍了。</p></blockquote><h2 id="5-9-修复角色认证串号问题"><a href="#5-9-修复角色认证串号问题" class="headerlink" title="5.9. 修复角色认证串号问题"></a>5.9. 修复角色认证串号问题</h2><p>首先，我们需要知道一个问题，<code>jwt-auth</code>颁发的<code>token</code>里面是不包含<code>模型驱动</code>的。也就是说，通过这个令牌，我们不知道它到底是属于<code>api</code>还是属于<code>admin</code>的。</p><blockquote><p>折腾了一晚上，百度了很多资料，想找找有没有解决办法。结果找到的都是没什么作用的，或者是让自动刷新失效了。最后自己追源码，找到了这种比较完美的方式。</p></blockquote><h3 id="5-9-1-函数"><a href="#5-9-1-函数" class="headerlink" title="5.9.1. 函数"></a>5.9.1. 函数</h3><p>我们先来看几个我们在中间件中用的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;checkForToken(<span class="variable">$request</span>)</span><br><span class="line"><span class="comment">//这个函数只会检测是否携带token以及token是否能被当前密钥所解析</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;auth-&gt;parseToken()-&gt;authenticate()</span><br><span class="line"><span class="comment">//将使用token进行登录，如果token过期，则抛出 TokenExpiredException 异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;auth-&gt;refresh(); </span><br><span class="line"><span class="comment">//刷新当前token</span></span><br></pre></td></tr></table></figure><p>然后我们再来看一个有趣的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Auth::check();</span><br><span class="line"><span class="comment">//可以根据当前的`guard`来判断这个token是否属于这个 guard ,不是则抛出 TokenInvalidException 异常</span></span><br><span class="line"><span class="comment">//但是，当token过期时，无论是不是属于这个 guard ，它也是都抛出 TokenInvalidException 异常。这导致我们无法正常判断出到底是属于哪种问题</span></span><br><span class="line"><span class="comment">//所以，想要用check()来判断，是不可能的。</span></span><br></pre></td></tr></table></figure><p>接着，我们继续看一个有意思的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Auth::payload();</span><br><span class="line"><span class="comment">//可以输出当前token的载荷信息(也就是token解析后的内容)</span></span><br><span class="line"><span class="comment">//但是，如果你这个token已经过期了，那这个函数将会报错</span></span><br></pre></td></tr></table></figure><h3 id="5-9-2-原理"><a href="#5-9-2-原理" class="headerlink" title="5.9.2. 原理"></a>5.9.2. 原理</h3><p>我们通过<code>Auth::payload()</code>可以看到未过期token的载荷信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;iss&quot;</span>: <span class="string">&quot;http://test.com/api/v1/admin/login&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;iat&quot;</span>: <span class="number">1551407332</span>,</span><br><span class="line">  <span class="attr">&quot;exp&quot;</span>: <span class="number">1551407392</span>,</span><br><span class="line">  <span class="attr">&quot;nbf&quot;</span>: <span class="number">1551407332</span>,</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;f9zwcMHaXBr5kQYp&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;prv&quot;</span>: <span class="string">&quot;df883db97bd05ef8ff85082d686c45e832e593a9&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们其实是可以拿到这些荷载信息的。同时，我们也可以加入自己的信息，这样在中间件时候进行解析，拿到我们的负载，就可以进行判断是否是属于当前<code>guard</code>的token了。</p><h3 id="5-9-3-实现"><a href="#5-9-3-实现" class="headerlink" title="5.9.3. 实现"></a>5.9.3. 实现</h3><p>修改 <code>app\Http\Controllers\Api\AdminController.php</code> 中的 <code>login</code>方法，在<code>token</code>中加入我们定义的字段。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取当前守护的名称</span></span><br><span class="line">    <span class="variable">$present_guard</span> =Auth::getDefaultDriver();</span><br><span class="line">    <span class="variable">$token</span> = Auth::claims([<span class="string">&#x27;guard&#x27;</span>=&gt;<span class="variable">$present_guard</span>])-&gt;attempt([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$request</span>-&gt;name, <span class="string">&#x27;password&#x27;</span> =&gt; <span class="variable">$request</span>-&gt;password]);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$token</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success([<span class="string">&#x27;token&#x27;</span> =&gt; <span class="string">&#x27;bearer &#x27;</span> . <span class="variable">$token</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">&#x27;账号或密码错误&#x27;</span>, <span class="number">400</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再修改中间件<code>app/Http/Middleware/Api/RefreshAdminTokenMiddleware.php</code> ，让其就算过期<code>token</code>也能读取出里面的信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Auth</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">JWTException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenExpiredException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenInvalidException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">BaseMiddleware</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，我们要继承的是 jwt 的 BaseMiddleware</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefreshAdminTokenMiddleware</span> <span class="keyword">extends</span> <span class="title">BaseMiddleware</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle an incoming request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Http\Request $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Closure $next</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> TokenInvalidException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span>, <span class="built_in">Closure</span> <span class="variable">$next</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 检查此次请求中是否带有 token，如果没有则抛出异常。</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;checkForToken(<span class="variable">$request</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 格式通过，验证是否是专属于这个的token</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前守护的名称</span></span><br><span class="line">        <span class="variable">$present_guard</span> = Auth::getDefaultDriver();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前token</span></span><br><span class="line">        <span class="variable">$token</span>=Auth::getToken();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//即使过期了，也能获取到token里的 载荷 信息。</span></span><br><span class="line">        <span class="variable">$payload</span> = Auth::manager()-&gt;getJWTProvider()-&gt;decode(<span class="variable">$token</span>-&gt;get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果不包含guard字段或者guard所对应的值与当前的guard守护值不相同</span></span><br><span class="line">        <span class="comment">//证明是不属于当前guard守护的token</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$payload</span>[<span class="string">&#x27;guard&#x27;</span>])||<span class="variable">$payload</span>[<span class="string">&#x27;guard&#x27;</span>]!=<span class="variable">$present_guard</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TokenInvalidException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用 try 包裹，以捕捉 token 过期所抛出的 TokenExpiredException  异常</span></span><br><span class="line">        <span class="comment">//2. 此时进入的都是属于当前guard守护的token</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 检测用户的登录状态，如果正常则通过</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;parseToken()-&gt;authenticate()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">&#x27;jwt-auth&#x27;</span>, <span class="string">&#x27;未登录&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="comment">// 3. 此处捕获到了 token 过期所抛出的 TokenExpiredException 异常，我们在这里需要做的是刷新该用户的 token 并将它添加到响应头中</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 刷新用户的 token</span></span><br><span class="line">                <span class="variable">$token</span> = <span class="keyword">$this</span>-&gt;auth-&gt;refresh();</span><br><span class="line">                <span class="comment">// 使用一次性登录以保证此次请求的成功</span></span><br><span class="line">                Auth::onceUsingId(<span class="keyword">$this</span>-&gt;auth-&gt;manager()-&gt;getPayloadFactory()-&gt;buildClaimsCollection()-&gt;toPlainArray()[<span class="string">&#x27;sub&#x27;</span>]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JWTException <span class="variable">$exception</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果捕获到此异常，即代表 refresh 也过期了，用户无法刷新令牌，需要重新登录。</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">&#x27;jwt-auth&#x27;</span>, <span class="variable">$exception</span>-&gt;getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在响应头中返回新的 token</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setAuthenticationHeader(<span class="variable">$next</span>(<span class="variable">$request</span>), <span class="variable">$token</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个中间件是通用的，可以直接替换User的刷新用户认证中间件噢</p></blockquote><h3 id="5-9-4-测试"><a href="#5-9-4-测试" class="headerlink" title="5.9.4. 测试"></a>5.9.4. 测试</h3><p>此时再次进行测试是否串号，最后结果可以成功阻止之前的串号问题，暂未发现其他BUG。</p><blockquote><p>user的修复串号问题请自己修改，这里就不再啰嗦一遍了。</p></blockquote><h2 id="5-10-单一设备登陆"><a href="#5-10-单一设备登陆" class="headerlink" title="5.10. 单一设备登陆"></a>5.10. 单一设备登陆</h2><h3 id="5-10-1-提出需求"><a href="#5-10-1-提出需求" class="headerlink" title="5.10.1. 提出需求"></a>5.10.1. 提出需求</h3><p>同一时间只允许登录唯一一台设备。例如设备 A 中用户如果已经登录，那么使用设备 B 登录同一账户，设备 A 就无法继续使用了。</p><h3 id="5-10-2-原理"><a href="#5-10-2-原理" class="headerlink" title="5.10.2. 原理"></a>5.10.2. 原理</h3><p>我们在登陆，<code>token</code>过期自动更换的时候，都会产生一个新的<code>token</code>。</p><p>我们将<code>token</code>都存到表中的<code>last_token</code>字段。在登陆接口，获取到<code>last_token</code>里的值，将其加入黑名单。</p><p>这样，只要我们无论在哪里登陆，之前的<code>token</code>一定会被拉黑失效，必须重新登陆，我们的目的也就达到了。</p><h3 id="5-10-3-实现"><a href="#5-10-3-实现" class="headerlink" title="5.10.3. 实现"></a>5.10.3. 实现</h3><p>修改 <code>app\Http\Controllers\Api\AdminController.php</code> 中的 <code>login</code>方法，在登陆的时候，拉黑上一个<code>token</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取当前守护的名称</span></span><br><span class="line">    <span class="variable">$present_guard</span> =Auth::getDefaultDriver();</span><br><span class="line">    <span class="variable">$token</span> = Auth::claims([<span class="string">&#x27;guard&#x27;</span>=&gt;<span class="variable">$present_guard</span>])-&gt;attempt([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$request</span>-&gt;name, <span class="string">&#x27;password&#x27;</span> =&gt; <span class="variable">$request</span>-&gt;password]);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$token</span>) &#123;</span><br><span class="line">        <span class="comment">//如果登陆，先检查原先是否有存token，有的话先失效，然后再存入最新的token</span></span><br><span class="line">        <span class="variable">$user</span> = Auth::user();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$user</span>-&gt;last_token) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Auth::setToken(<span class="variable">$user</span>-&gt;last_token)-&gt;invalidate();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (TokenExpiredException <span class="variable">$e</span>)&#123;</span><br><span class="line">                <span class="comment">//因为让一个过期的token再失效，会抛出异常，所以我们捕捉异常，不需要做任何处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$user</span>-&gt;last_token = <span class="variable">$token</span>;</span><br><span class="line">        <span class="variable">$user</span>-&gt;save();        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setStatusCode(<span class="number">201</span>)-&gt;success([<span class="string">&#x27;token&#x27;</span> =&gt; <span class="string">&#x27;bearer &#x27;</span> . <span class="variable">$token</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;failed(<span class="string">&#x27;账号或密码错误&#x27;</span>, <span class="number">400</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再修改中间件<code>app/Http/Middleware/Api/RefreshAdminTokenMiddleware.php</code> ，更新的<code>token</code>加到<code>last_token</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Auth</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">JWTException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenExpiredException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Exceptions</span>\<span class="title">TokenInvalidException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">BaseMiddleware</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，我们要继承的是 jwt 的 BaseMiddleware</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefreshAdminTokenMiddleware</span> <span class="keyword">extends</span> <span class="title">BaseMiddleware</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle an incoming request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Http\Request $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Closure $next</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> TokenInvalidException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span>, <span class="built_in">Closure</span> <span class="variable">$next</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 检查此次请求中是否带有 token，如果没有则抛出异常。</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;checkForToken(<span class="variable">$request</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 格式通过，验证是否是专属于这个的token</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前守护的名称</span></span><br><span class="line">        <span class="variable">$present_guard</span> = Auth::getDefaultDriver();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前token</span></span><br><span class="line">        <span class="variable">$token</span>=Auth::getToken();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//即使过期了，也能获取到token里的 载荷 信息。</span></span><br><span class="line">        <span class="variable">$payload</span> = Auth::manager()-&gt;getJWTProvider()-&gt;decode(<span class="variable">$token</span>-&gt;get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果不包含guard字段或者guard所对应的值与当前的guard守护值不相同</span></span><br><span class="line">        <span class="comment">//证明是不属于当前guard守护的token</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$payload</span>[<span class="string">&#x27;guard&#x27;</span>])||<span class="variable">$payload</span>[<span class="string">&#x27;guard&#x27;</span>]!=<span class="variable">$present_guard</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TokenInvalidException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用 try 包裹，以捕捉 token 过期所抛出的 TokenExpiredException  异常</span></span><br><span class="line">        <span class="comment">//2. 此时进入的都是属于当前guard守护的token</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 检测用户的登录状态，如果正常则通过</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;parseToken()-&gt;authenticate()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">&#x27;jwt-auth&#x27;</span>, <span class="string">&#x27;未登录&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException <span class="variable">$exception</span>) &#123;</span><br><span class="line">            <span class="comment">// 3. 此处捕获到了 token 过期所抛出的 TokenExpiredException 异常，我们在这里需要做的是刷新该用户的 token 并将它添加到响应头中</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 刷新用户的 token</span></span><br><span class="line">                <span class="variable">$token</span> = <span class="keyword">$this</span>-&gt;auth-&gt;refresh();</span><br><span class="line">                <span class="comment">// 使用一次性登录以保证此次请求的成功</span></span><br><span class="line">                Auth::onceUsingId(<span class="keyword">$this</span>-&gt;auth-&gt;manager()-&gt;getPayloadFactory()-&gt;buildClaimsCollection()-&gt;toPlainArray()[<span class="string">&#x27;sub&#x27;</span>]);</span><br><span class="line">                <span class="comment">//刷新了token，将token存入数据库</span></span><br><span class="line">                <span class="variable">$user</span> = Auth::user();</span><br><span class="line">                <span class="variable">$user</span>-&gt;last_token = <span class="variable">$token</span>;</span><br><span class="line">                <span class="variable">$user</span>-&gt;save();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JWTException <span class="variable">$exception</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果捕获到此异常，即代表 refresh 也过期了，用户无法刷新令牌，需要重新登录。</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedHttpException(<span class="string">&#x27;jwt-auth&#x27;</span>, <span class="variable">$exception</span>-&gt;getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在响应头中返回新的 token</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;setAuthenticationHeader(<span class="variable">$next</span>(<span class="variable">$request</span>), <span class="variable">$token</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-10-4-测试"><a href="#5-10-4-测试" class="headerlink" title="5.10.4. 测试"></a>5.10.4. 测试</h3><p>我们先登陆一次<code>/api/v1/admin/login</code>，将获取到<code>token</code>携带访问<code>/api/v1/admins/info</code>。正常访问。<br><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/iKyPgwRhQA.png!large" alt="file"><br>当我们再次请求登陆<code>/api/v1/admin/login</code>，然后继续用原<code>token</code>访问<code>/api/v1/admins/info</code>，提示错误。<br><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/UFUGdXLbKX.png!large" alt="file"></p><blockquote><p>user的请自行添加，自行测试结果</p></blockquote><h2 id="5-11-horizon管理异步队列"><a href="#5-11-horizon管理异步队列" class="headerlink" title="5.11. horizon管理异步队列"></a>5.11. horizon管理异步队列</h2><p>开发中，我们也经常需要使用异步队列，来加快我们的响应速度。比如发送短信，发送验证码等。但是队列执行结果的成功或者失败只能通过日志来查看。这里，我们使用<code>horizon</code>来管理异步队列，完成登陆和刷新<code>token</code>时，将<code>token</code>存入<code>last_token</code>的因为放在异步完成。</p><blockquote><p>Horizon 提供了一个漂亮的仪表盘，并且可以通过代码配置你的 Laravel Redis 队列，同时它允许你轻易的监控你的队列系统中诸如任务吞吐量，运行时间和失败任务等关键指标。</p></blockquote><h3 id="5-11-1-安装"><a href="#5-11-1-安装" class="headerlink" title="5.11.1. 安装"></a>5.11.1. 安装</h3><p><code>horizon</code>的详细介绍可以<a href="https://learnku.com/docs/laravel/5.7/horizon/2308">查看手册</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require laravel&#x2F;horizon</span><br></pre></td></tr></table></figure><h3 id="5-11-2-发布配置文件"><a href="#5-11-2-发布配置文件" class="headerlink" title="5.11.2. 发布配置文件"></a>5.11.2. 发布配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider&#x3D;&quot;Laravel\Horizon\HorizonServiceProvider&quot;</span><br></pre></td></tr></table></figure><h3 id="5-11-3-修改队列驱动"><a href="#5-11-3-修改队列驱动" class="headerlink" title="5.11.3. 修改队列驱动"></a>5.11.3. 修改队列驱动</h3><p>打开 <code>.env</code> 文件，将<code>QUEUE_CONNECTION</code>从<code>sync</code>改成<code>redis</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QUEUE_CONNECTION&#x3D;redis</span><br></pre></td></tr></table></figure><h3 id="5-11-4-仪表盘权限验证"><a href="#5-11-4-仪表盘权限验证" class="headerlink" title="5.11.4. 仪表盘权限验证"></a>5.11.4. 仪表盘权限验证</h3><p>仪表盘不能通过接口访问。所以我们做验证的时候，可以通过指定的<code>IP</code>才能正常通过进入仪表盘。<code>IP</code>可以写在<code>.env</code>文件里，当IP发生变化时进行修改。</p><p>在 <code>.env</code> 最后加上一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HORIZON_IP&#x3D;想通过访问的IP地址</span><br><span class="line">比如</span><br><span class="line">HORIZON_IP&#x3D;127.0.0.1</span><br></pre></td></tr></table></figure><p>修改 <code>app/Providers/AuthServiceProvider.php</code> 文件 里的 <code>boot</code> 方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerPolicies();</span><br><span class="line">    Horizon::auth(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$request</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(env(<span class="string">&#x27;APP_ENV&#x27;</span>,<span class="string">&#x27;local&#x27;</span>) ==<span class="string">&#x27;local&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$get_ip</span>=<span class="variable">$request</span>-&gt;getClientIp();</span><br><span class="line">            <span class="variable">$can_ip</span>=env(<span class="string">&#x27;HORIZON_IP&#x27;</span><span class="string">&#x27;127.0.0.1&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$get_ip</span> == <span class="variable">$can_ip</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-11-5-编写任务类"><a href="#5-11-5-编写任务类" class="headerlink" title="5.11.5. 编写任务类"></a>5.11.5. 编写任务类</h3><p>创建一个专门负责保存<code>last_token</code>的任务类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:job Api&#x2F;SaveLastTokenJob</span><br></pre></td></tr></table></figure><p>打开 <code>app/Jobs/Api/SaveLastTokenJob.php</code> 文件 ，填写以下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Jobs</span>\<span class="title">Api</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Bus</span>\<span class="title">Queueable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>\<span class="title">SerializesModels</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Queue</span>\<span class="title">InteractsWithQueue</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Queue</span>\<span class="title">ShouldQueue</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Bus</span>\<span class="title">Dispatchable</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SaveLastTokenJob</span> <span class="keyword">implements</span> <span class="title">ShouldQueue</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Dispatchable</span>, <span class="title">InteractsWithQueue</span>, <span class="title">Queueable</span>, <span class="title">SerializesModels</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$model</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new job instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$model</span>,<span class="variable">$token</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;model=<span class="variable">$model</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token=<span class="variable">$token</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute the job.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;model-&gt;last_token = <span class="keyword">$this</span>-&gt;token;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;model-&gt;save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-11-6-使用任务类"><a href="#5-11-6-使用任务类" class="headerlink" title="5.11.6. 使用任务类"></a>5.11.6. 使用任务类</h3><p>将控制器与中间件里的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span>-&gt;last_token = <span class="variable">$token</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;save();</span><br></pre></td></tr></table></figure><p>统一替换为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SaveLastTokenJob::dispatch(<span class="variable">$user</span>,<span class="variable">$token</span>);</span><br></pre></td></tr></table></figure><h3 id="5-11-7-运行Horizon"><a href="#5-11-7-运行Horizon" class="headerlink" title="5.11.7. 运行Horizon"></a>5.11.7. 运行Horizon</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan horizon</span><br></pre></td></tr></table></figure><p>此时，进程处于阻塞状态。<br>打开浏览器输入<code>http://你的域名/horizon</code>,可以看到<code>Horizon</code>仪表盘。</p><p><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/F8zh35QvCg.png!large" alt="file"></p><h3 id="5-11-8-Supervisor守护进程"><a href="#5-11-8-Supervisor守护进程" class="headerlink" title="5.11.8. Supervisor守护进程"></a>5.11.8. Supervisor守护进程</h3><p>我们可以使用Supervisor来守护我们的horizon阻塞进程。具体方法可以看我之前写的文章:<a href="https://www.guaosi.com/2019/02/25/install-and-use-supervisor/">安装和使用守护进程–Supervisor</a></p><h3 id="5-11-9-测试"><a href="#5-11-9-测试" class="headerlink" title="5.11.9. 测试"></a>5.11.9. 测试</h3><p>确认<code>horizon</code>已经正常启动。然后我们访问<code>/api/v1/admin/login</code>这个登陆接口。打开数据库可以发现，<code>last_token</code>与返回结果的<code>token</code>相同。我们也可以再打开仪表盘，看任务完成情况</p><p><img src="https://cdn.learnku.com/uploads/images/201903/22/21588/GyWOWZB1Fg.png!large" alt="file"></p><h3 id="5-11-10-注意"><a href="#5-11-10-注意" class="headerlink" title="5.11.10. 注意"></a>5.11.10. 注意</h3><p>如果修改了<code>job</code>类的源码，需要将<code>horizon</code>重新启动，否则代码还是未改动前的。(应该是<code>horzion</code>是将所有任务类常驻内存的原因)</p><h1 id="6-成品"><a href="#6-成品" class="headerlink" title="6. 成品"></a>6. 成品</h1><p>到此，所有修改已经全部完成，如果还有新的更改也会实时更新。同时，本文中的所有修改都已经在正式项目中运行过了。</p><p>如果你已经看完了整篇文章，知道了修改的原因，但是不想受累自己修改一遍。我已经将修改后的上传到全球最大的同性交友网站了，可以直接点击<a href="https://github.com/guaosi/Laravel_api_init">这里</a>直接搬走。或者复制下方的链接打开。</p><p>项目地址: <a href="https://github.com/guaosi/Laravel_api_init">https://github.com/guaosi/Laravel_api_init</a></p><blockquote><p>本文转载自 <a href="https://www.guaosi.com/2019/02/26/laravel-api-initialization-preparation/">https://www.guaosi.com/2019/02/26/laravel-api-initialization-preparation/</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-起因&quot;&gt;&lt;a href=&quot;#1-起因&quot; class=&quot;headerlink&quot; title=&quot;1. 起因&quot;&gt;&lt;/a&gt;1. 起因&lt;/h1&gt;&lt;p&gt;       随着前后端完全分离，&lt;code&gt;PHP&lt;/code&gt;也基本告别了&lt;code&gt;view&lt;/code&gt;模板嵌套开发，转而专门写资源接口。&lt;code&gt;Laravel&lt;/code&gt;是PHP框架中最优雅的框架，国内也越来越多人告别&lt;code&gt;ThinkPHP&lt;/code&gt;选择了&lt;code&gt;Laravel&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Laravel" scheme="https://airy6.github.io/categories/Laravel/"/>
    
    
    <category term="Laravel" scheme="https://airy6.github.io/tags/Laravel/"/>
    
    <category term="转载" scheme="https://airy6.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>我居然还有一个博客？！</title>
    <link href="https://airy6.github.io/e86f1947.html"/>
    <id>https://airy6.github.io/e86f1947.html</id>
    <published>2021-01-03T04:37:14.000Z</published>
    <updated>2021-01-04T09:42:38.527Z</updated>
    
    <content type="html"><![CDATA[<p>昨天做梦的时候突然在梦中想起，我居然还有这么个博客 😂 自从服务器到期忘了续费之后，就再也没写过博客了。</p><a id="more"></a><p>因为以前的服务器价格不太合适，而且除了发个博客其他时候基本上一点用处都没有。。</p><p>以前的内容也都没有了，因为以前的博客是直接搭建在服务器上的，时间久了之后数据库没了，也没有备份。。实惨</p><p>不过忽然想起来以前在搭建博客的时候顺便用 gitpage 搭了一个hexo博客，但发了几个文章之后觉得很麻烦，因为要用电脑编辑，还要再执行命令，各种配置，而且提交还要交到github才能出效果，比以前页面编辑要麻烦很多，还不能用手机编辑。</p><p>服务器暂时不准备再买了，就暂时放到gitpage上吧，这么一想好像也不那么的麻烦了，哈哈哈哈。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天做梦的时候突然在梦中想起，我居然还有这么个博客 😂 自从服务器到期忘了续费之后，就再也没写过博客了。&lt;/p&gt;</summary>
    
    
    
    <category term="散事" scheme="https://airy6.github.io/categories/%E6%95%A3%E4%BA%8B/"/>
    
    
    <category term="散事" scheme="https://airy6.github.io/tags/%E6%95%A3%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 对关联表的一些操作</title>
    <link href="https://airy6.github.io/b22c03d9.html"/>
    <id>https://airy6.github.io/b22c03d9.html</id>
    <published>2020-07-06T14:21:48.000Z</published>
    <updated>2021-01-05T05:06:38.258Z</updated>
    
    <content type="html"><![CDATA[<p>Laravel 为开发者提供了灵活且优雅的 model 层。不过，因为方法太多，有时总是忘记一些有用的方法。这里就一对多模型关联的中对关联表的一个方法 with 的用法做一个记录</p><p>在业务逻辑中，经常会有这样的场景，一个用户上传有多个图片，而图片只归属于一个用户，这个时候就需要一对多关联，假设用户表 users 和 图片表 images。images 表中有一个user_id 字段用来标记图片所属的用户。</p><a id="more"></a><p>在 users 模型中创建关联：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关联图片表</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">images</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;﻿</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Images::class, <span class="string">&#x27;user_id&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时访问集合中的 images 属性就可以访问到所有属于此用户的图片了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span>   = User::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$userId</span>))-&gt;first();</span><br><span class="line"><span class="comment">// 这里最好加上判断，如果是 null 就不存在 images 属性</span></span><br><span class="line"><span class="variable">$images</span> = <span class="variable">$user</span>-&gt;images;<span class="comment">// 这就是这个用户的所有图片</span></span><br></pre></td></tr></table></figure><p>然而，有时候我们不需要取出 images 表的所有字段，我们只需要 path 一个字段即可。</p><p>但如果直接使用 select([‘path’]) 方法的话，是查找的 users 表中的 path 字段，然而 users 表中并不存在 path 字段，这样使用会产生错误，这样就需要用到下面的方法。</p><blockquote><p>关于预加载用法可以参考 <a href="https://learnku.com/docs/laravel/6.x/eloquent-relationships/5177#012e7e">文档</a></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$images</span> = User::getAnchorByUuid(<span class="variable">$request</span>-&gt;get(<span class="string">&#x27;uuid&#x27;</span>))</span><br><span class="line">            -&gt;with([</span><br><span class="line">                <span class="string">&#x27;images&#x27;</span> =&gt; <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">                    <span class="variable">$query</span>-&gt;select([<span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;user_id&#x27;</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            ])</span><br><span class="line">            -&gt;first()</span><br><span class="line">            -&gt;images;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$images</span> = User::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$request</span>-&gt;get(<span class="string">&#x27;uuid&#x27;</span>))</span><br><span class="line">            -&gt;with(<span class="string">&#x27;images:path,user_id&#x27;</span>)</span><br><span class="line">            -&gt;first()</span><br><span class="line">            -&gt;images;</span><br></pre></td></tr></table></figure><p>with 可以使用字符串或者数组，数组的值可以是闭包函数，第一种方式更加灵活，第二种则更加简便，闭包中可以使用更多的方法，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$images</span> = User::getAnchorByUuid(<span class="variable">$request</span>-&gt;get(<span class="string">&#x27;uuid&#x27;</span>))</span><br><span class="line">            -&gt;with([</span><br><span class="line">                <span class="string">&#x27;images&#x27;</span> =&gt; <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">                    <span class="variable">$query</span>-&gt;orderByDesc(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">                    <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;status&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            ]);</span><br></pre></td></tr></table></figure><p>本篇文章就到此结束了，主要目的是为了记录一下 with 的用法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Laravel 为开发者提供了灵活且优雅的 model 层。不过，因为方法太多，有时总是忘记一些有用的方法。这里就一对多模型关联的中对关联表的一个方法 with 的用法做一个记录&lt;/p&gt;
&lt;p&gt;在业务逻辑中，经常会有这样的场景，一个用户上传有多个图片，而图片只归属于一个用户，这个时候就需要一对多关联，假设用户表 users 和 图片表 images。images 表中有一个user_id 字段用来标记图片所属的用户。&lt;/p&gt;</summary>
    
    
    
    <category term="Laravel" scheme="https://airy6.github.io/categories/Laravel/"/>
    
    
    <category term="Laravel" scheme="https://airy6.github.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>调休的一天</title>
    <link href="https://airy6.github.io/7b0f9d9.html"/>
    <id>https://airy6.github.io/7b0f9d9.html</id>
    <published>2020-01-11T07:30:21.000Z</published>
    <updated>2021-01-05T05:05:52.527Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=536836266,488945292&fm=26&gp=0.jpg"></p><a id="more"></a><p>周六，本来要休息的日子，我却还在上班😂</p><p>不过不是加班，谁让我上次调休休息过了。让我想起一句经典台词“出来混，迟早要还的”这不。来补班了嘛。</p><p>不过也挺好，人少清净，就连平时领导在时跟只鸡崽一样的同事，都大胆的玩起了游戏。真菜！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=536836266,488945292&amp;fm=26&amp;gp=0.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="散事" scheme="https://airy6.github.io/categories/%E6%95%A3%E4%BA%8B/"/>
    
    
  </entry>
  
</feed>
