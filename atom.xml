<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Airy</title>
  
  
  <link href="https://airy6.github.io/atom.xml" rel="self"/>
  
  <link href="https://airy6.github.io/"/>
  <updated>2021-01-03T06:01:06.625Z</updated>
  <id>https://airy6.github.io/</id>
  
  <author>
    <name>Airy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我居然还有一个博客？！</title>
    <link href="https://airy6.github.io/2021/01/03/%E6%88%91%E5%B1%85%E7%84%B6%E8%BF%98%E6%9C%89%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://airy6.github.io/2021/01/03/%E6%88%91%E5%B1%85%E7%84%B6%E8%BF%98%E6%9C%89%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-01-03T04:37:14.000Z</published>
    <updated>2021-01-03T06:01:06.625Z</updated>
    
    <content type="html"><![CDATA[<p>昨天做梦的时候突然在梦中想起，我居然还有这么个博客 😂 自从服务器到期忘了续费之后，就再也没写过博客了。</p><a id="more"></a><p>因为以前的服务器价格不太合适，而且除了发个博客其他时候基本上一点用处都没有。。</p><p>以前的内容也都没有了，因为以前的博客是直接搭建在服务器上的，时间久了之后数据库没了，也没有备份。。实惨</p><p>不过忽然想起来以前在搭建博客的时候顺便用 gitpage 搭了一个hexo博客，但发了几个文章之后觉得很麻烦，因为要用电脑编辑，还要再执行命令，各种配置，而且提交还要交到github才能出效果，比以前页面编辑要麻烦很多，还不能用手机编辑。</p><p>服务器暂时不准备再买了，就暂时放到gitpage上吧，这么一想好像也不那么的麻烦了，哈哈哈哈。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天做梦的时候突然在梦中想起，我居然还有这么个博客 😂 自从服务器到期忘了续费之后，就再也没写过博客了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="散事" scheme="https://airy6.github.io/tags/%E6%95%A3%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 对关联表的一些操作</title>
    <link href="https://airy6.github.io/2020/07/06/Laravel%20%E5%AF%B9%E5%85%B3%E8%81%94%E8%A1%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <id>https://airy6.github.io/2020/07/06/Laravel%20%E5%AF%B9%E5%85%B3%E8%81%94%E8%A1%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</id>
    <published>2020-07-06T14:21:48.000Z</published>
    <updated>2021-01-01T11:58:48.782Z</updated>
    
    <content type="html"><![CDATA[<p>Laravel 为开发者提供了灵活且优雅的 model 层。不过，因为方法太多，有时总是忘记一些有用的方法。这里就一对多模型关联的中对关联表的一个方法 with 的用法做一个记录</p><p>在业务逻辑中，经常会有这样的场景，一个用户上传有多个图片，而图片只归属于一个用户，这个时候就需要一对多关联，假设用户表 users 和 图片表 images。images 表中有一个user_id 字段用来标记图片所属的用户。</p><a id="more"></a><p>在 users 模型中创建关联：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关联图片表</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">images</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;﻿</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Images::class, <span class="string">&#x27;user_id&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时访问集合中的 images 属性就可以访问到所有属于此用户的图片了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span>   = User::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$userId</span>))-&gt;first();</span><br><span class="line"><span class="comment">// 这里最好加上判断，如果是 null 就不存在 images 属性</span></span><br><span class="line"><span class="variable">$images</span> = <span class="variable">$user</span>-&gt;images;<span class="comment">// 这就是这个用户的所有图片</span></span><br></pre></td></tr></table></figure><p>然而，有时候我们不需要取出 images 表的所有字段，我们只需要 path 一个字段即可。</p><p>但如果直接使用 select([‘path’]) 方法的话，是查找的 users 表中的 path 字段，然而 users 表中并不存在 path 字段，这样使用会产生错误，这样就需要用到下面的方法。</p><blockquote><p>关于预加载用法可以参考 <a href="https://learnku.com/docs/laravel/6.x/eloquent-relationships/5177#012e7e">文档</a></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$images</span> = User::getAnchorByUuid(<span class="variable">$request</span>-&gt;get(<span class="string">&#x27;uuid&#x27;</span>))</span><br><span class="line">            -&gt;with([</span><br><span class="line">                <span class="string">&#x27;images&#x27;</span> =&gt; <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">                    <span class="variable">$query</span>-&gt;select([<span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;user_id&#x27;</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            ])</span><br><span class="line">            -&gt;first()</span><br><span class="line">            -&gt;images;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$images</span> = User::where(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$request</span>-&gt;get(<span class="string">&#x27;uuid&#x27;</span>))</span><br><span class="line">            -&gt;with(<span class="string">&#x27;images:path,user_id&#x27;</span>)</span><br><span class="line">            -&gt;first()</span><br><span class="line">            -&gt;images;</span><br></pre></td></tr></table></figure><p>with 可以使用字符串或者数组，数组的值可以是闭包函数，第一种方式更加灵活，第二种则更加简便，闭包中可以使用更多的方法，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$images</span> = User::getAnchorByUuid(<span class="variable">$request</span>-&gt;get(<span class="string">&#x27;uuid&#x27;</span>))</span><br><span class="line">            -&gt;with([</span><br><span class="line">                <span class="string">&#x27;images&#x27;</span> =&gt; <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">                    <span class="variable">$query</span>-&gt;orderByDesc(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">                    <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;status&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            ]);</span><br></pre></td></tr></table></figure><p>本篇文章就到此结束了，主要目的是为了记录一下 with 的用法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Laravel 为开发者提供了灵活且优雅的 model 层。不过，因为方法太多，有时总是忘记一些有用的方法。这里就一对多模型关联的中对关联表的一个方法 with 的用法做一个记录&lt;/p&gt;
&lt;p&gt;在业务逻辑中，经常会有这样的场景，一个用户上传有多个图片，而图片只归属于一个用户，这个时候就需要一对多关联，假设用户表 users 和 图片表 images。images 表中有一个user_id 字段用来标记图片所属的用户。&lt;/p&gt;</summary>
    
    
    
    <category term="Laravel" scheme="https://airy6.github.io/categories/Laravel/"/>
    
    
    <category term="Laravel" scheme="https://airy6.github.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>调休的一天</title>
    <link href="https://airy6.github.io/2020/01/11/%E8%B0%83%E4%BC%91%E7%9A%84%E4%B8%80%E5%A4%A9/"/>
    <id>https://airy6.github.io/2020/01/11/%E8%B0%83%E4%BC%91%E7%9A%84%E4%B8%80%E5%A4%A9/</id>
    <published>2020-01-11T07:30:21.000Z</published>
    <updated>2021-01-03T04:36:39.755Z</updated>
    
    <content type="html"><![CDATA[<p>周六，本来要休息的日子，我却还在上班😂</p><p>不过不是加班，谁让我上次调休休息过了。让我想起一句经典台词“出来混，迟早要还的”这不。来补班了嘛。</p><p>不过也挺好，人少清净，就连平时领导在时跟只鸡崽一样的同事，都大胆的玩起了游戏。真菜！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;周六，本来要休息的日子，我却还在上班😂&lt;/p&gt;
&lt;p&gt;不过不是加班，谁让我上次调休休息过了。让我想起一句经典台词“出来混，迟早要还的”这不。来补班了嘛。&lt;/p&gt;
&lt;p&gt;不过也挺好，人少清净，就连平时领导在时跟只鸡崽一样的同事，都大胆的玩起了游戏。真菜！&lt;/p&gt;
</summary>
      
    
    
    
    <category term="散事" scheme="https://airy6.github.io/categories/%E6%95%A3%E4%BA%8B/"/>
    
    
  </entry>
  
</feed>
